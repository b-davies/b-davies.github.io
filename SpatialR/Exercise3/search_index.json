[["_main.html", "Spatial R Exercise 3: Spatial Dataset Interactions Part 1 Data interactions 1.1 Adding packages Part 2 Spatial subsetting: Vector to Raster 2.1 Load vector and raster data 2.2 Crop raster with vector data 2.3 Try it yourself! Part 3 Spatial subsetting: Raster to Raster 3.1 Add more raster data 3.2 Raster algebra revisited Part 4 Spatial subsetting: Vector to Vector 4.1 Convert table data to vector data 4.2 Cropping vector to vector 4.3 Try it yourself Part 5 Spatial Sampling 5.1 Extract point values Part 6 Bring it all together", " Spatial R Exercise 3: Spatial Dataset Interactions Ben Davies 2022-05-10 Part 1 Data interactions In this exercise, we’ll look at using different types of geospatial data and how they can be made to interact in R. In this case, we’re interested how micromammal communities of southern Africa reflect different seasonal climate systems. 1.1 Adding packages First, as usual, we’ll start by loading the packages we need to work with spatial data: sf and terra. #Load packages require(&quot;sf&quot;) ## Loading required package: sf ## Linking to GEOS 3.9.1, GDAL 3.3.2, PROJ 7.2.1; sf_use_s2() is TRUE require(&quot;terra&quot;) ## Loading required package: terra ## terra 1.5.21 Part 2 Spatial subsetting: Vector to Raster Here we’ll work on subsetting one spatial dataset with another. In this case, we want to use a vector dataset to set the limits of a raster dataset. 2.1 Load vector and raster data Let’s use rast to load some data that we’ll be using to assess contemporary seasonality in southern Africa. #Load annual precipitation data for all of Africa annRain&lt;-rast(&quot;africaANNPPT.tif&quot;) #Plot it plot(annRain) This precipitation data comes from the Terraclimate product, giving modeled monthly spatial averages from 1958-present. Here, the values for each year have been summed, and then these annual values are then averaged to give average annual precipitation. However, this particular raster covers all of Africa, which is way more data that we need. We’ll import southern Africa borders shapefile to look at how we might subset it. saBorders&lt;-st_read(&quot;south_africa_border.shp&quot;) ## Reading layer `south_africa_border&#39; from data source ## `C:\\Users\\bdav_\\Dropbox\\Teaching\\Spatial R Short Course\\Bookdown\\Exercise3\\Exercise3\\south_africa_border.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 3 features and 94 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 16.46998 ymin: -34.82195 xmax: 32.89308 ymax: -22.12645 ## Geodetic CRS: WGS 84 plot(st_geometry(saBorders)) 2.2 Crop raster with vector data Now that we have a raster and a vector dataset, we’ll use the latter to spatially subset the former. To do this, we will need the crop function. #Crop rainfall data to southern Africa saAnnRain&lt;-crop(annRain,saBorders) The first argument to the crop function is the raster we want crop (annRain). The second is the object we are using to set the new margins (saBorders). Now we can take a look… #Plot new raster and borders plot(saAnnRain) plot(st_geometry(saBorders),add=T) Hmmm… this looks OK, but maybe not exactly what we wanted since the rainfall values extend beyond the area of interest. The main reason for this is that we used an sf object as the cropping object. When terra tries to do this, it can only crop to the extent of the object. In order to crop more closely, we need to turn our saBorders object into a terra SpatVector object, which is a format terra uses to represnt vector data. We can use the vect function for this: #Turn sf object into a SpatVector dataset saBordersSF&lt;-vect(saBorders) saBordersSF ## class : SpatVector ## geometry : polygons ## dimensions : 3, 94 (geometries, attributes) ## extent : 16.46998, 32.89308, -34.82195, -22.12645 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## names : featurecla scalerank LABELRANK SOVEREIGNT SOV_A3 ADM0_DIF ## type : &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## values : Admin-0 country 0 2 South Africa ZAF 0 ## Admin-0 country 0 4 eSwatini SWZ 0 ## Admin-0 country 0 6 Lesotho LSO 0 ## LEVEL TYPE ADMIN ADM0_A3 (and 84 more) ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 2 Sovereign country South Africa ZAF ## 2 Sovereign country eSwatini SWZ ## 2 Sovereign country Lesotho LSO OK, now we have the borders as a SpatVector. We can plug this in and see what we get: #Crop rain data again with SpatVector saAnnRain&lt;-crop(annRain,saBordersSF) plot(saAnnRain) plot(st_geometry(saBorders),add=T) Still not quite there! The last step is that we need add the mask argument to the crop function and set it to true. This tells crop to take any values outside the cropping object and convert them to NA values. #Crop rain data again with SpatVector saAnnRain&lt;-crop(annRain,saBordersSF,mask=T) plot(saAnnRain) plot(st_geometry(saBorders),add=T) There we go! That looks much better. Let’s use global to get a sense of the average and standard deviation on this new raster. #Get some stats global(saAnnRain,&quot;mean&quot;) ## mean ## africaAnnPPT NaN global(saAnnRain,&quot;sd&quot;) ## sd ## africaAnnPPT NaN Ack! When we see NaN, that stands for “not a number”. That means R tried to do something mathematically impossible. The problem here is that, since we used mask to carve out our raster, there are now lots of NA values in the raster, and R can’t calculate statistics when these values are present. We can use na.rm to get rid of them. #Get some stats global(saAnnRain,&quot;mean&quot;,na.rm=TRUE) ## mean ## africaAnnPPT 439.047 global(saAnnRain,&quot;sd&quot;,na.rm=TRUE) ## sd ## africaAnnPPT 228.5005 2.3 Try it yourself! It’s very easy to make histograms out of raster data. See if you can make a histogram out of the rainfall data for southern Africa and then all of Africa. How do they compare? Can you create a boolean raster for places in southern Africa that get more than the mean rainfall? Part 3 Spatial subsetting: Raster to Raster This time, we’re going to use a raster data to perform a spatial subset on another raster. This should be a little more straightforward since we aren’t trying to make sf and terra talk to eachother. 3.1 Add more raster data Here we’ll add another Terraclimate-derived dataset. #Import winter rainfall winRain&lt;-rast(&quot;africaWinPPT.tif&quot;) #Plot it plot(winRain) This is just like the annual average rainfall data, but only for the winter months (June, July, and August). Since our annual rainfall data has already been cropped, we should be able to use that data to crop our new dataset. #Crop winter rain using annual rain saWinRain&lt;-crop(winRain,saAnnRain,mask=TRUE) #Plot it plot(saWinRain) This again! The problem here is that the mask argument here only applies to a SpatVector object like we made in the previous section. If we want to use a raster to mask another raster, we need to call the mask function: #Crop it again saWinRain&lt;-crop(winRain,saAnnRain) #Mask the winter rain data with the annual rain data saWinRain&lt;-mask(saWinRain,saAnnRain) #Plot it plot(saWinRain) OK, great! 3.2 Raster algebra revisited OK, for this last step, we want to know what percentage of an area’s rainfall occurs in the winter. This will give us a sense of seasonality across southern Africa. To get this all we have to do is divide the winter rainfall values by the total annual values: #Get winter percentages winRainPercent&lt;-saWinRain/saAnnRain #Plot it plot(winRainPercent) Cool! Hopefully from this map you can see southern Africa’s very distinctive winter and summer rainfall zones. Part 4 Spatial subsetting: Vector to Vector The last spatial subsetting we’ll do is using one vector to subset another. 4.1 Convert table data to vector data First let’s bring in some table data with spatial coordinates: micro&lt;-read.csv(&quot;micromammals.csv&quot;) head(micro) ## Site Abbreviation Latitude Longitude CODE ORDER ## 1 100 Elliott Street Kokstad ESK -30.54 29.41 CCYA SORICOMORPHA ## 2 100 Elliott Street Kokstad ESK -30.54 29.41 CFLA SORICOMORPHA ## 3 100 Elliott Street Kokstad ESK -30.54 29.41 DINC RODENTIA ## 4 100 Elliott Street Kokstad ESK -30.54 29.41 MMIN RODENTIA ## 5 100 Elliott Street Kokstad ESK -30.54 29.41 MMUS RODENTIA ## 6 100 Elliott Street Kokstad ESK -30.54 29.41 MNAT RODENTIA ## FAMILY SUBFAMILY GENUS SPECIES COMMONNAME ## 1 Soricidae Crocidurinae Crocidura cyanea Reddish-gray Musk Shrew ## 2 Soricidae Crocidurinae Crocidura flavescens Greater Red Musk Shrew ## 3 Muridae Murinae Dasymys incomtus s.l. Common Dasymys ## 4 Muridae Murinae Mus minutoides Southern African Pygmy Mouse ## 5 Muridae Murinae Mus musculus House Mouse ## 6 Muridae Murinae Mastomys natalensis Natal Mastomys These are modern micromammal occurrences that were used in this paper: Faith, J. Tyler, Brian M. Chase, and D. Margaret Avery. 2019. “Late Quaternary Micromammals and the Precipitation History of the Southern Cape, South Africa.” Quaternary Research 91 (2): 848–60. https://doi.org/10.1017/qua.2018.105. The information includes the site, the coordinates, and the species encountered. In order to make use of it in our analysis, we need to turn it into vector data. microSF&lt;-st_as_sf(micro,coords=c(&quot;Longitude&quot;,&quot;Latitude&quot;),crs=4326) plot(st_geometry(microSF),axes=T) 4.2 Cropping vector to vector The way to crop one vector dataset with another is to use the st_crop function. #Crop micromammal dataset to southern Africa micromammals&lt;-st_crop(microSF,saBorders) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries Note that warning, but don’t worry too much about it. This is terra reminding you that, by subsetting this way, your are assuming that the attributes are spatially constant. Imagine if you were using this function to crop a polygon that represented grassland vegetation. This wouldn’t be problematic, because the cropped polygon would still be grassland. However, now imagine that you used it to crop the polygon for Lesotho, which contains a population estimate. That population estimate would no longer be valid for the cropped section of Lesotho. Here, we’re not really worried about this because we’re pruning points, so there isn’t any cutting of individual features. Let’s take a look. #Plot borders and micromammals plot(st_geometry(saBorders),axes=T) plot(st_geometry(micromammals),add=T) Looks good! 4.3 Try it yourself Create a plot that shows the borders, but instead of just the micromammal point locations, plot them by genus (hint: this may involve square brackets). Change the symbol shape with the pch argument (it takes an integer and defaults to 1). Part 5 Spatial Sampling For this final step, we’re going to use our micromammal vector data to sample our raster data on rainfall seasonality. 5.1 Extract point values To accomplish this, we need to use extract, which we’ve seen before. In that instance, we used a matrix of XY values. Here, we want to use the locations of our micromammals. To use it here with our SpatRaster object, we need to make it into a SpatVector object with vect. winRainMM&lt;-extract(winRainPercent,vect(micromammals)) head(winRainMM) ## ID africaWinPPT ## 1 1 0.1719577 ## 2 2 0.1719577 ## 3 3 0.1719577 ## 4 4 0.1719577 ## 5 5 0.1719577 ## 6 6 0.1719577 Great! This is a dataframe with our winter rainfall percentage data. Notice it takes it’s name from the original winter rainfall dataset that we read in earlier. Now we just want to tack this on to our micromammal dataset. To do this, we’ll first turn the table above into a vector of values, and then use cbind to add that vector as a new column. #Add this column back to the micromammal data WR&lt;-winRainMM$africaWinPPT micromammals&lt;-cbind(micromammals,WR) micromammals ## Simple feature collection with 1482 features and 10 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: 17.43 ymin: -34.69 xmax: 31.98 ymax: -22.45 ## Geodetic CRS: WGS 84 ## First 10 features: ## Site Abbreviation CODE ORDER FAMILY ## 1 100 Elliott Street Kokstad ESK CCYA SORICOMORPHA Soricidae ## 2 100 Elliott Street Kokstad ESK CFLA SORICOMORPHA Soricidae ## 3 100 Elliott Street Kokstad ESK DINC RODENTIA Muridae ## 4 100 Elliott Street Kokstad ESK MMIN RODENTIA Muridae ## 5 100 Elliott Street Kokstad ESK MMUS RODENTIA Muridae ## 6 100 Elliott Street Kokstad ESK MNAT RODENTIA Muridae ## 7 100 Elliott Street Kokstad ESK MVAR SORICOMORPHA Soricidae ## 8 100 Elliott Street Kokstad ESK OIRR RODENTIA Muridae ## 9 100 Elliott Street Kokstad ESK RPUM RODENTIA Muridae ## 10 100 Elliott Street Kokstad ESK SINF SORICOMORPHA Soricidae ## SUBFAMILY GENUS SPECIES COMMONNAME WR ## 1 Crocidurinae Crocidura cyanea Reddish-gray Musk Shrew 0.1719577 ## 2 Crocidurinae Crocidura flavescens Greater Red Musk Shrew 0.1719577 ## 3 Murinae Dasymys incomtus s.l. Common Dasymys 0.1719577 ## 4 Murinae Mus minutoides Southern African Pygmy Mouse 0.1719577 ## 5 Murinae Mus musculus House Mouse 0.1719577 ## 6 Murinae Mastomys natalensis Natal Mastomys 0.1719577 ## 7 Myosoricinae Myosorex varius Forest Shrew 0.1719577 ## 8 Otomyinae Otomys irroratus Southern African Vlei Rat 0.1719577 ## 9 Murinae Rhabdomys pumilio Xeric Four-striped Grass Rat 0.1719577 ## 10 Crocidurinae Suncus infinitesimus Least Dwarf Shrew 0.1719577 ## geometry ## 1 POINT (29.41 -30.54) ## 2 POINT (29.41 -30.54) ## 3 POINT (29.41 -30.54) ## 4 POINT (29.41 -30.54) ## 5 POINT (29.41 -30.54) ## 6 POINT (29.41 -30.54) ## 7 POINT (29.41 -30.54) ## 8 POINT (29.41 -30.54) ## 9 POINT (29.41 -30.54) ## 10 POINT (29.41 -30.54) We did it! Now we can start to look at the seasonality of different species niches. First, let’s plot the data: #Plot borders and micromammals by their winter rainfall percentage plot(st_geometry(saBorders),axes=T) plot(micromammals[&#39;WR&#39;],add=T,pch=16) We can use subset to look at specific micromammals. Here’s the house mouse: #Plot house mouse rainfall houseMouse&lt;-subset(micromammals,COMMONNAME==&quot;House Mouse&quot;) plot(st_geometry(saBorders),axes=T,main=&quot;House Mouse&quot;) plot(st_geometry(houseMouse),add=T,pch=16,col=&quot;gray&quot;) And here’s the singe striped lemniscomys (grass mouse): lemniscomys&lt;-subset(micromammals,COMMONNAME==&quot;Single-Striped Lemniscomys&quot;) plot(st_geometry(saBorders),axes=T,main=&quot;Single-Striped Lemniscomys&quot;) plot(st_geometry(lemniscomys),add=T,pch=16,col=&quot;brown&quot;) Finally, we can use this data to compare these species. Here’s a boxplot for these two species. boxplot(houseMouse$WR,lemniscomys$WR,names=c(&quot;House Mouse&quot;,&quot;Single-Striped Lemniscomys&quot;),ylim=c(0,1),ylab=&quot;% Winter Rainfall&quot;) Part 6 Bring it all together OK, we’ve managed to look at this across southern Africa, but what if we wanted to limit our analysis a single country? The answer: subsetting! * Can you subset the borders data to include only Lesotho? * Can you then spatially subset the annual and winter rainfall data to Lesotho? Can you get the percentage of winter rainfall for Lesotho? The subsetting methods are up to you, but make sure you plot all with axes. * Can you get a histogram of Lesotho annual rainfall? "]]
