[["index.html", "Spatial R Exercise 4: Geometric Operations Part 1 Geometric operations 1.1 Adding packages", " Spatial R Exercise 4: Geometric Operations Ben Davies 2022-05-10 Part 1 Geometric operations In this exercise, we’ll look at transforming spatial data using different operations in the sp and terra packages. 1.1 Adding packages Once again, we’ll start by loading the packages we need to work with spatial data: sf and terra. #Load packages require(&quot;sf&quot;) ## Loading required package: sf ## Linking to GEOS 3.9.1, GDAL 3.3.2, PROJ 7.2.1; sf_use_s2() is TRUE require(&quot;terra&quot;) ## Loading required package: terra ## terra 1.5.21 "],["vector-data-operations.html", "Part 2 Vector data operations 2.1 Adding data 2.2 Finding potential threats across space 2.3 Try it yourself", " Part 2 Vector data operations Let’s imagine a scenario: Martha’s Vineyard and Nantucket Islands are home to several endemic species of special concern. You’ve been contracted by the New England Entomological Association to help them identify potential threats for the chain dotted geometer (Cingilia catenaria), a species of moth, in its preferred habitats (Open Land and Brushland/Successional). In addition to habitat loss due to human encroachment, threats include vehicle strikes and pesticides used in agriculture. The NEEA would like to know where the habitats are, and where they are being threatened. 2.1 Adding data First things first, lets load the data we need to conduct this analysis. There are three files, each starting with the word “island”. Import these as vector datasets. coasts&lt;-st_read(&quot;island_outline.shp&quot;) ## Reading layer `island_outline&#39; from data source ## `C:\\Users\\bdav_\\Dropbox\\Teaching\\Spatial R Short Course\\Bookdown\\Exercise4\\island_outline.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 18 features and 3 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 255304.2 ymin: 777606.4 xmax: 329063.4 ymax: 804036.7 ## Projected CRS: NAD83 / Massachusetts Mainland landuse&lt;-st_read(&quot;island_landuse.shp&quot;) ## Reading layer `island_landuse&#39; from data source ## `C:\\Users\\bdav_\\Dropbox\\Teaching\\Spatial R Short Course\\Bookdown\\Exercise4\\island_landuse.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 12269 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 255304.2 ymin: 777606.4 xmax: 329063.4 ymax: 804036.7 ## Projected CRS: NAD83 / Massachusetts Mainland roads&lt;-st_read(&quot;island_roads.shp&quot;) ## Reading layer `island_roads&#39; from data source ## `C:\\Users\\bdav_\\Dropbox\\Teaching\\Spatial R Short Course\\Bookdown\\Exercise4\\island_roads.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 6809 features and 71 fields ## Geometry type: MULTILINESTRING ## Dimension: XY ## Bounding box: xmin: 255536.6 ymin: 777674.6 xmax: 328894.4 ymax: 803946.2 ## Projected CRS: NAD83 / Massachusetts Mainland ##Getting the moth’s preferred habitats Next, we want to look at this data and see what sorts of things are stored in it. head(landuse) ## Simple feature collection with 6 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 310603.8 ymin: 781243.4 xmax: 312451.5 ymax: 783489.9 ## Projected CRS: NAD83 / Massachusetts Mainland ## OBJECTID LU05_DESC LUCODE AREA LEN Shape_Leng ## 1 1 Open Land 6 9552.6483 742.6913 742.6913 ## 2 2 Brushland/Successional 40 38475.3051 1454.3708 1454.3708 ## 3 3 Brushland/Successional 40 1413.9615 150.0112 150.0112 ## 4 4 Non-Forested Wetland 4 6961.6412 375.3539 375.3539 ## 5 5 Non-Forested Wetland 4 623.2688 161.6040 161.6040 ## 6 6 Very Low Density Residential 38 4578.2132 295.8042 295.8042 ## Shape_Area geometry ## 1 9552.6483 POLYGON ((310790.1 782366.3... ## 2 38475.3051 POLYGON ((310891.4 783361.4... ## 3 1413.9615 POLYGON ((311090 782745.9, ... ## 4 6961.6412 POLYGON ((311812.4 781292.2... ## 5 623.2688 POLYGON ((312088.9 782272.3... ## 6 4578.2132 POLYGON ((312447.6 783113.7... There’s a few different attributes here, but the one that’s most likely to help us figure out habitats and threats is the LU05_DESC, which is a description of landuse on a parcel of land as observed in 2005. Let’s look at what the unique values are for this attribute: unique(landuse$LU05_DESC) ## [1] &quot;Open Land&quot; &quot;Brushland/Successional&quot; ## [3] &quot;Non-Forested Wetland&quot; &quot;Very Low Density Residential&quot; ## [5] &quot;Low Density Residential&quot; &quot;Water-Based Recreation&quot; ## [7] &quot;Water&quot; &quot;Multi-Family Residential&quot; ## [9] &quot;Nursery&quot; &quot;Forest&quot; ## [11] &quot;Medium Density Residential&quot; &quot;Forested Wetland&quot; ## [13] &quot;Commercial&quot; &quot;Mining&quot; ## [15] &quot;High Density Residential&quot; &quot;Urban Public/Institutional&quot; ## [17] &quot;Industrial&quot; &quot;Saltwater Sandy Beach&quot; ## [19] &quot;Saltwater Wetland&quot; &quot;Transportation&quot; ## [21] &quot;Transitional&quot; &quot;Pasture&quot; ## [23] &quot;Participation Recreation&quot; &quot;Cranberry Bog&quot; ## [25] &quot;Orchard&quot; &quot;Cropland&quot; ## [27] &quot;Golf Course&quot; &quot;Cemetery&quot; ## [29] &quot;Marina&quot; &quot;Junkyard&quot; ## [31] &quot;Waste Disposal&quot; &quot;Powerline/Utility&quot; ## [33] &quot;Spectator Recreation&quot; From the description, we know that the moth’s preferred habitats are in Open Land and Brushland/Successional types of places. We can isolate these by using subset, but since there’s two of them, we can put both inside a vector with c() and then use the %in operator: preferredHabitats&lt;-subset(landuse,LU05_DESC %in% c(&quot;Open Land&quot;, &quot;Brushland/Successional&quot;)) head(preferredHabitats) ## Simple feature collection with 6 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 310603.8 ymin: 781961.4 xmax: 312696.2 ymax: 783489.9 ## Projected CRS: NAD83 / Massachusetts Mainland ## OBJECTID LU05_DESC LUCODE AREA LEN Shape_Leng ## 1 1 Open Land 6 9552.648 742.6913 742.6913 ## 2 2 Brushland/Successional 40 38475.305 1454.3708 1454.3708 ## 3 3 Brushland/Successional 40 1413.962 150.0112 150.0112 ## 8 8 Open Land 6 19192.743 777.5628 777.5628 ## 9 9 Open Land 6 5770.652 409.3352 409.3352 ## 11 11 Open Land 6 1872.546 244.6481 244.6481 ## Shape_Area geometry ## 1 9552.648 POLYGON ((310790.1 782366.3... ## 2 38475.305 POLYGON ((310891.4 783361.4... ## 3 1413.962 POLYGON ((311090 782745.9, ... ## 8 19192.743 POLYGON ((312527.4 783295.4... ## 9 5770.652 POLYGON ((312548.9 783062.9... ## 11 1872.546 POLYGON ((312668.9 781966.9... Let’s map these out so we can see what we’re looking at. plot(st_geometry(coasts)) plot(st_geometry(preferredHabitats),col=&quot;dark green&quot;,add=T) 2.2 Finding potential threats across space OK, now we know where the moth likes to live, so now we just need to figure out what might harm it in those spaces. The NEEA says that agricultural practices taking place within 500 m of a preferred habitat can be potentially harmful due to pesticide use. So let’s get all of the land where agriculture is practiced first. Have a look at the list of uniqe types we made above and see what you can find. agLand&lt;-subset(landuse,LU05_DESC %in% c(&quot;Orchards&quot;,&quot;Cropland&quot;,&quot;Nursery&quot;,&quot;Pasture&quot;)) head(agLand) ## Simple feature collection with 6 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 315489.3 ymin: 779397.1 xmax: 325471.3 ymax: 785622.1 ## Projected CRS: NAD83 / Massachusetts Mainland ## OBJECTID LU05_DESC LUCODE AREA LEN Shape_Leng Shape_Area ## 44 44 Nursery 36 14618.085 501.3215 501.3215 14618.085 ## 195 195 Nursery 36 5500.052 341.7689 341.7689 5500.052 ## 316 316 Pasture 2 13947.822 561.6673 561.6673 13947.822 ## 525 525 Pasture 2 5506.502 333.6362 333.6362 5506.502 ## 633 633 Pasture 2 20194.599 950.6085 950.6085 20194.599 ## 680 680 Pasture 2 3839.795 288.5467 288.5467 3839.795 ## geometry ## 44 POLYGON ((315642.4 780119.4... ## 195 POLYGON ((319304.7 780369, ... ## 316 POLYGON ((324900.6 779597.9... ## 525 POLYGON ((325469.7 785122.3... ## 633 POLYGON ((316148.8 782462.1... ## 680 POLYGON ((325463.1 785607.7... I’ve decided to leave out the Vineyard’s boutique cranberry bogs for now to keep things simple, but you can select any you think might be threatening. Lets see what this looks like with our preferred habitats. plot(st_geometry(coasts)) plot(st_geometry(preferredHabitats),col=&quot;dark green&quot;,add=T) plot(st_geometry(agLand),col=&quot;red&quot;,add=T) With all that we’re plotting, this graphic is getting hard to read. One way to alleviate that is to eliminate the borders from some of our polygon data: plot(st_geometry(coasts)) plot(st_geometry(preferredHabitats),col=&quot;dark green&quot;,border=NA,add=T) plot(st_geometry(agLand),col=&quot;red&quot;,border=NA,add=T) Much better. Hmmm… looks like there may be some adjacency that is within 500m. Only one way to be sure, though. ##Buffer The tool we want to figure out areas within a given distance from our agricultural areas is the st_buffer tool. This is not dissimilar to a buffer tool that is common in desktop GIS. First, we’ll want to know what linear units our agricultural land vector data is using. We can get that using st_crs and accessing the units from the coordinate system. st_crs(agLand)$units ## [1] &quot;m&quot; Cool, we’re in meters, which is what we want to do. If it were something else, we might want to change coordinate systems, or convert our 500 m value into whatever units we’re using. Now we’re good to go with st_buffer. #Make agricultural buffer and plot agBuffer&lt;-st_buffer(agLand,500) plot(st_geometry(agBuffer),col=&quot;dark blue&quot;,border=NA) plot(st_geometry(agLand),col=&quot;red&quot;,border=NA,add=T) This is an excellent example of the kind of tedious grunt work that we leave the computer to do. If we were to do this by hand, depending on how precise we wanted to be, this could take quite some time to figure out where 500 m away from the edge of an agricultural parcel is. Thankfully, we don’t have to, and we can get on with asking spatial questions. Now we have our agricultural land, and the buffers indicating spaces that might threaten our moth species. We need to do the same for roads, although here the threat is more localized. The NEEA says a 50 m margin should work fine for roads. #Make road buffer and plot roadBuffer&lt;-st_buffer(roads,50) plot(st_geometry(roadBuffer),col=&quot;dark blue&quot;) plot(st_geometry(roads),col=&quot;red&quot;,add=T) ##Intersection As a last step, we want to see where our preferredHabitats overlap with our various threat buffers. For this operation, we can use the st_intersection function. agThreat&lt;-st_intersection(preferredHabitats,agBuffer) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries roadThreat&lt;-st_intersection(preferredHabitats,roadBuffer) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries We’ve seen this warning before, and there isn’t anything really in our data that is affected (at least not any that we are going to use). Now we should be able to show where on the islands our moths might be affected and where they’ll be OK. Let’s make a nice plot (with axes!) we can give to the NEEA to bring to town meetings: plot(st_geometry(coasts),axes=T) plot(st_geometry(preferredHabitats),col=&quot;dark green&quot;,border=NA,add=T) plot(st_geometry(agThreat),col=&quot;red&quot;,border=NA,add=T) plot(st_geometry(roadThreat),col=&quot;red&quot;,border=NA,add=T) 2.3 Try it yourself See if you can do the following with this dataset: The local residents are likely to be a little peeved about any new restrictions on the roadsides. How does this look if you decrease the road buffer from 50 to 10 meters? Or maybe they’ll be very much on board and want it to be 100 meters! Try out some values. Mines are not particularly good for this moth species either. What happens if you add mines to the list of hazards? "],["raster-data-operations.html", "Part 3 Raster Data Operations 3.1 Adding vector data 3.2 distance function 3.3 Exploring relationships between distance and another feature 3.4 Visualizing and quantifying distance relationships", " Part 3 Raster Data Operations Next, we’ll look at doing some distance-based operations using a raster dataset. This particular example deals with grocery stores and light rail stations in Denver, which has implications for food and transportation equity, but this method could easily be applied to any situation where we want to know how close or distant some entities (e.g., sites with evidence for butchery) are from other entities of interest (e.g., raw stone material sources). 3.1 Adding vector data First, let’s get our train stations loaded. denverRail&lt;-st_read(&quot;denverRail.shp&quot;) ## Reading layer `denverRail&#39; from data source ## `C:\\Users\\bdav_\\Dropbox\\Teaching\\Spatial R Short Course\\Bookdown\\Exercise4\\denverRail.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 77 features and 29 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -105.2013 ymin: 39.52047 xmax: -104.6739 ymax: 39.9229 ## Geodetic CRS: WGS 84 plot(st_geometry(denverRail),axes=T) Doesn’t look like much at the moment, but this is genuine, bonafide rail station data from the Denver RTD. What we’re interested in is: how far are metro Denver’s grocery stores from a rail station? ##Adding some raster data We’re going to use terra’s distance function to figure out how far away our train stations are from… well, to start we’re going to figure out how far away they are from everything. What we need to start is a raster dataset that more or less covers the same area. Here’s an elevation model once again from our friends at GEBCO. denverDEM&lt;-rast(&quot;denverDEM.asc&quot;) You may have noticed that there’s a different file extension here from the usual .tif. This .asc file is an ASCII raster, which is also a common way to share raster data. Rather than being an image file like a GeoTIFF, the ASCII raster is a text table with the same number of rows and columns as the raster. At the very top of this file are 6 lines of text called a header, which gives whatever machine is reading it information about the number of rows, columns, etc. In order to be useful here, the ASCII file has to be accompanied by a .prj file, which you’ll see sitting in the working directory in the Files tab. OK, so we need to make sure that these datasets are overlapping in terms of space. Let’s plot them and take a look: plot(denverDEM,axes=TRUE) plot(st_geometry(denverRail),add=T) OK, that looks pretty good so far. Let’s take a look at the distance function. 3.2 distance function The distance function takes a raster and vector as arguments and returns a raster that gives the distance to the nearest vector feature for every cell. However, it can be a little finnicky about the values in the raster you give it, so it’s best to give it a blank raster. We can make one of these by creating a copy of the DEM and then setting all of the cells in that raster to NA. naRaster&lt;-denverDEM naRaster[]&lt;-NA plot(naRaster) There you have it: a blank raster. Next, since this is a terra function, we’re going to turn our sf vector data into a SpatVector with vect: denverRail2&lt;-vect(denverRail) denverRail2 ## class : SpatVector ## geometry : points ## dimensions : 77, 29 (geometries, attributes) ## extent : -105.2013, -104.6739, 39.52047, 39.9229 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## names : OBJECTID PID NAME LOCAL_RTS EXPRESS_RT LIMITED_RT ## type : &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## values : 157 64 Littleton / Mi~ 402L NA NA ## 158 63 Littleton / Do~ 29-36-59-66 NA NA ## 159 65 Oxford-City of~ 51 NA NA ## REGIONAL_R SKYRIDE_RT SPECIAL_RT ADDRESS (and 19 more) ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## NA NA D 3203 W Mineral~ ## NA NA D 5777 S Prince St ## NA NA D 4101 Windermer~ Now we’re ready to run the distance function. This might take a a few seconds to run. railDistance&lt;-distance(naRaster,denverRail2) OK, so as you can see, we gave it an empty raster and a SpatVector object that both occupy the same space. This tells the distance function that we want to calculate the distance between them and turn that into our new object railDistance. Let’s take a look: plot(railDistance) It looks a little crazy, but hopefully you can see that the white-ish points in this image are where the rail stations are, and then the color in the plot increases with distance from these locations. The distance is in meters by default. 3.3 Exploring relationships between distance and another feature Now let’s figure our where our grocery stores fall in terms of distance from a rail station. First we add our grocery stores: denverGrocery&lt;-st_read(&quot;denverGrocery.shp&quot;) ## Reading layer `denverGrocery&#39; from data source ## `C:\\Users\\bdav_\\Dropbox\\Teaching\\Spatial R Short Course\\Bookdown\\Exercise4\\denverGrocery.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 446 features and 11 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: 3109915 ymin: 1650081 xmax: 3219009 ymax: 1730349 ## Projected CRS: NAD83(2011) / Colorado Central (ftUS) Careful here: this dataset is in the Colorado State Plane CRS, so it won’t work immediately with our WGS84 lat/long data. We can reproject it pretty easily, though: denverGroceryWGS&lt;-st_transform(denverGrocery,4326) head(denverGroceryWGS) ## Simple feature collection with 6 features and 11 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -105.0257 ymin: 39.71079 xmax: -104.9731 ymax: 39.76008 ## Geodetic CRS: WGS 84 ## OBJECTID POINT_X POINT_Y STORE_NAME ADDRESS_LI ## 1 1 -105.0257 39.76009 WALGREENS 2975 N FEDERAL BLVD ## 2 2 -104.9838 39.74743 UPTOWN OASIS 298 E 20TH AVE ## 3 3 -104.9731 39.71089 DIAMOND SHAMROCK 300 S DOWNING ST ## 4 4 -104.9831 39.72552 LITTLE STAR MART 300 E 6TH AVE ## 5 5 -105.0246 39.71080 WALGREEN&#39;S #10935 300 S FEDERAL BLVD ## 6 6 -104.9888 39.74281 RUSSELL&#39;S #204 303 16TH ST ## STORE_TYPE LICENSE_NU CITY ZIP SNAP WIC geometry ## 1 Convenience Store 75399 DENVER 80211 No No POINT (-105.0257 39.76008) ## 2 Small Food Market 1052788 DENVER 80205 No No POINT (-104.9838 39.74742) ## 3 Convenience Store 29906 DENVER 80209 Yes Yes POINT (-104.9731 39.71088) ## 4 Convenience Store 0 DENVER 80203 No No POINT (-104.9831 39.72551) ## 5 Convenience Store 1040325 DENVER 80219 Yes Yes POINT (-105.0246 39.71079) ## 6 Convenience Store 14879 DENVER 80202 No No POINT (-104.9888 39.7428) Next we’ll subset it to true grocery stores: denverGrocs&lt;-subset(denverGroceryWGS,STORE_TYPE==&quot;Grocery Store&quot;) head(denverGrocs) ## Simple feature collection with 6 features and 11 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -105.0514 ymin: 39.65479 xmax: -104.9444 ymax: 39.77618 ## Geodetic CRS: WGS 84 ## OBJECTID POINT_X POINT_Y STORE_NAME ADDRESS_LI ## 14 14 -105.0514 39.65480 KING SOOPERS 3100 S SHERIDAN BLVD ## 23 23 -104.9889 39.71038 SAFEWAY 323 S BROADWAY ## 40 40 -104.9444 39.74033 SPROUTS FARMERS MARKET 3625 E COLFAX AVE ## 44 44 -104.9874 39.70976 NATURAL GROCERS 368 S BROADWAY ## 45 45 -104.9759 39.77299 NATURAL GROCERS 3757 N BRIGHTON BLVD ## 49 49 -105.0366 39.77619 SAFEWAY 3800 W 44TH AVE ## STORE_TYPE LICENSE_NU CITY ZIP SNAP WIC geometry ## 14 Grocery Store 0 DENVER 80219 No No POINT (-105.0514 39.65479) ## 23 Grocery Store 0 DENVER 80209 Yes Yes POINT (-104.9889 39.71037) ## 40 Grocery Store 1045687 DENVER 80206 Yes Yes POINT (-104.9444 39.74032) ## 44 Grocery Store 0 DENVER 80209 Yes Yes POINT (-104.9873 39.70975) ## 45 Grocery Store 0 DENVER 80216 No No POINT (-104.9759 39.77298) ## 49 Grocery Store 0 DENVER 80211 Yes Yes POINT (-105.0366 39.77618) 3.4 Visualizing and quantifying distance relationships OK, let’s see what that looks like on the distance map: plot(railDistance,axes=T) plot(st_geometry(denverGrocs),add=T) What do you notice? There is definitely some overlap between where the rail stations are and where the grocery stores are, but there are also some places where it looks like a 5 km walk or more from the train! What we really need now is to extract these raster values and see what the distribution looks like. To do that, we’re going to use the extract function. And again, since this is a terra function, we’ll convert our vector data to a SpatVector so it plays nicely. grocRailDist&lt;-extract(railDistance,vect(denverGrocs)) Doing this gives us table of values, and we can use the $ operator to pass the column with the distance values to a histogram: hist(grocRailDist$denverDEM) This is interesting: many grocery stores are pretty close to a rail station, but there are also a fair number that are 4, 5, or 6 kms away. While a resident of Denver might know this by gut instinct, we’ve now quantified this relationship. It’s official: we’re answering spatial questions! "],["bringing-it-all-together.html", "Part 4 Bringing it all together!", " Part 4 Bringing it all together! In your working directory there is a shapefile called “animalPath”. This comes from Movebank, a repository for animal movement datasets, and consists of tracking data on 6 African buffalo in Kruger National Park over a period of about two years. There is also a shapefile for streams in the vicinity that comes from the (South African department of Water and Sanitation)[https://www.dws.gov.za]. What we would like to learn is: about how much time does each animal spend close to a stream? Import the shapefiles. Try subsetting the data and plotting the animal tracking data for individual animals (hint: unique might be helpful in figuring out animal names). Create a distance raster to figure out how far each cell is from a stream (hint: you can use the krugerDEM.tif file provided, but remember it needs to be converted to NA values, and don’t forget to use a SpatVector for points) Extract values from the distance raster using the animalPath points. Create a histogram of distance values for the bufflao and show how far they roam from the water on average. Bonus: Can you add the distance values to your animalPath Points and then map that data? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
