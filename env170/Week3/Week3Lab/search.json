[
  {
    "objectID": "01_UsingGrammar.html#footnotes",
    "href": "01_UsingGrammar.html#footnotes",
    "title": "1  A Grammar of Graphics",
    "section": "",
    "text": "Wilkinson, Leland. 2005. The Grammar of Graphics. Chicago: Springer Science & Business Media. https://books.google.com/books?id=_kRX4LoFfGQC&source=gbs_similarbooks↩︎"
  },
  {
    "objectID": "02_Amounts.html",
    "href": "02_Amounts.html",
    "title": "2  Visualizing Amounts",
    "section": "",
    "text": "In this section, we’ll explore how to use bar plot to illustrate\n\nMapping to geom_bar\nIn addition to loading the necessary packages, let’s get a new dataset. We can access the data from the Gapminder plot as a package in R:\n\nlibrary(datasets)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#install.packages(\"gapminder\")\nlibrary(gapminder)\n\nRemoving the # at the front will allow you to install this package (I have it here because I already have it installed). This will add the dataset as a tibble called gapminder:\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nWe have a few different variables to work with in this dataset, including:\n\nCountry\nContinent\nYear of recording\nLife expectancy (in years)\nPopulation\nPer capita Gross Domestic Product (in USD)\n\nLet’s use some of this to make a bar plot. First, we can try using the year of recording as a categorical variable:\n\nggplot(data=gapminder,mapping=aes(x=year)) + \n  geom_bar()\n\n\n\n\nHmmm… all of the bars are exactly the same. This is because the function is counting the number of instances of each year in the dataset. Since the same number of countries are recorded for each year, for each year this will just be the number of countries (142). What if we used country?\n\nggplot(data=gapminder,mapping=aes(x=country)) + \n  geom_bar()\n\n\n\n\nAck! Not only is this uninformative (countries are recorded over the same 12 years), but there’s too many countries to plot on the x-axis. Let’s try again but with continents:\n\nggplot(data=gapminder,mapping=aes(x=continent)) + \n  geom_bar()\n\n\n\n\nThis makes a bit more sense. We can see there are more instances of “Africa” than, say, “Americas”, which makes sense: there are more countries in the former. However, if we look at the left, the counts are a pretty high estimate for number of countries. This is because for each continent, it is counting each country for each year (12) in the dataset.\nLet’s say we just wanted to look at the data from the most recent year in the dataset. First, we need to figure out what that year was. We can use the max function to get this information:\n\nmax(gapminder$year)\n\n[1] 2007\n\n\nThis function just takes a vector and gives the maximum value. So the most recent data here is from 2007. If we just want the data from that year, we can use the square brackets ([]) to subset the data to just the rows from 2007. We’ll create a new variable called gm2007:\n\ngm2007&lt;-gapminder[gapminder$year==2007,]\n\nRemember that inside the square brackets, what comes left of the comma refers to rows, and what comes right refers to columns. So this code is effectively saying “give me all the rows in the gapminder tibble where the value in the year column is equal to 2007.” We’ve assigned it to a new object called gm2007. Now, when we look:\n\ngm2007\n\n# A tibble: 142 × 6\n   country     continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       2007    43.8  31889923      975.\n 2 Albania     Europe     2007    76.4   3600523     5937.\n 3 Algeria     Africa     2007    72.3  33333216     6223.\n 4 Angola      Africa     2007    42.7  12420476     4797.\n 5 Argentina   Americas   2007    75.3  40301927    12779.\n 6 Australia   Oceania    2007    81.2  20434176    34435.\n 7 Austria     Europe     2007    79.8   8199783    36126.\n 8 Bahrain     Asia       2007    75.6    708573    29796.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391.\n10 Belgium     Europe     2007    79.4  10392226    33693.\n# ℹ 132 more rows\n\n\nGreat, now we just have one year’s worth of data. When we make a bar plot:\n\nggplot(data=gm2007,mapping=aes(x=continent)) + \n  geom_bar()\n\n\n\n\nThis looks a lot more reasonable. Now each bar is reflecting the number of countries in each continental grouping.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nYou can look at all the years in this dataset using the unique function. It works like this\nunique(gapminder$year)\nChoose another year from this data, create a subset, and then make a barplot of the number of countries by continent.\n\n\n\nReordering the categories\nRight now our plot is presenting these groupings from left to right in alphabetical order. We might instead want to order them based on their position in the data. To do this, we need to let R know that the continent category isn’t just a , but a factor (an ordered set of categories). We won’t dive into this too deeply here, but we can apply the fct_infreq function to the continent vector to order them based on their frequency in the data:\n\nggplot(data=gm2007,mapping=aes(x=fct_infreq(continent))) + \n  geom_bar()\n\n\n\n\n\n\nReorienting bar graphs\nOftentimes, our categorical labels at the bottom will overlap. We saw an extreme case of this when we tried to plot bars by country. If you have a milder case of this, it can often be advantageous to plot horizontally rather than vertically. We can do this by adding another layer with a function, coord_flip, related to the coordinate space:\n\nggplot(data=gm2007,mapping=aes(x=fct_infreq(continent))) + \n  geom_bar() +\n  coord_flip() \n\n\n\n\nLike the geometry, this coordinate layer is added using the + operator.\n\n\n\nAdding a mapping: bars on bars\nLet’s say we wanted to represent more than a single variable in these data. We can take a look at this with a new dataset:\n\n#install.packages(\"palmerpenguins\")\nlibrary(\"palmerpenguins\")\n\nThis is data recorded on different penguin populations from three Antarctic islands. Let’s look:\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nSo we have some categories (species, island, sex) as well as some numerical data (bill_length, flipper_length, etc.). Let’s look at penguin counts per island:\n\nggplot(data=penguins,mapping=aes(x=island)) + \n  geom_bar()\n\n\n\n\nGreat. But what if we wanted to see how these break down in terms of species? We can use a stacked bar by telling R to map this on to the aesthetic fill for the bars:\n\nggplot(data=penguins,mapping=aes(x=island,fill=species)) + \n  geom_bar()\n\n\n\n\nThe fill argument connects to the fill color used in the bars. Now, we’re getting counts of each penguin species for each island, as well as the breakdown by species as determined by color.\nWe can also map colors on to our gapminder data from 2007:\n\nggplot(data=gm2007,mapping=aes(x=fct_infreq(continent),fill=continent)) + \n  geom_bar() +\n  coord_flip() \n\n\n\n\nWhile this illustrates how to add an additional aesthetic mapping, this relates back to our discussion about deliberate design: is this something that would be needed?\n\n\n\n\n\n\nTry it yourself!\n\n\n\nWith the penguin data, try the following:\n\nPlot the counts per island broken down by sex\nPlot the counts per species, broken down by island\nPlot the counts per island, broken down by year of observation"
  },
  {
    "objectID": "03_Distributions.html",
    "href": "03_Distributions.html",
    "title": "3  Histograms",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)\ngm2007&lt;-gapminder[gapminder$year==2007,]\n\nLet’s say that instead of categories, we wanted to look at the distribution of a set of numerical values. We’ve already explored these using histograms, and we can access histograms by using the geom_histogram function:\n\nggplot(data=gm2007,aes(x=lifeExp)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nYou may have noted that we dropped the mapping= here. As long as you’re using aes, it’s not needed. You may have also noted there’s an error we get from running this command that relates to bin size. We can handle this with another argument, but for now don’t worry about it.\n\n\nThe boxplot\nOftentimes, we may be interested in showing distributions across multiple categories. We can view multiple distributions using a box plot:\n\nggplot(data=gm2007,aes(x=continent,y=gdpPercap)) +\n  geom_boxplot()\n\n\n\n\nThe box plot (or box-and-whisker plot) shows the distribution of values in terms of the interquartile range, where the box represents the space between the 25% and 75% and the whiskers represent the rest. These are useful when you want to compare across multiple categories. For example:\n\nggplot(data=penguins,aes(x=species,y=flipper_length_mm)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nNote the error here: there are two instances where data are not available, and R is letting you know it can’t plot these.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nHopefully now you’re seeing how these ggplot2 functions work. Try the following:\n\nMake a histogram of penguin bill lengths\nMake a boxplot of life expectancy by continental grouping"
  },
  {
    "objectID": "04_Relationships.html",
    "href": "04_Relationships.html",
    "title": "4  Scatterplots",
    "section": "",
    "text": "Scatterplots are used to visualize relationships between two numerical variables, mapped to the x-position and y-position.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)\ngm2007&lt;-gapminder[gapminder$year==2007,]\n\nWe’ve seen scatterplots before in both Base R and ggplot2. You’ll remember that we use the geom_point function to create one:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp))+\n  geom_point()\n\n\n\n\nThis is an interesting distribution, and aligns with what we saw in the first Gapminder plot. Most of the countries with lower life expectancy are at the lower end of the GDP spectrum, while higher GDP is associated exclusively with higher life expectancy.\nTo make this line up even better with the original, we can color the points based on their continental groups:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp,color=continent))+\n  geom_point()\n\n\n\n\n\nModifying labels\nFinally, if we wanted to modify, we can add these as additional layers, using terms we remember from Base R:\n\nggplot(data=gm2007,aes(x=lifeExp,y=gdpPercap,color=continent))+\n  geom_point() +\n  xlab(\"Life Expectancy in Years\") +\n  ylab(\"Per Capita GDP\") \n\n\n\n\nThere’s a lot more to be done with ggplot2, but hopefully by now you’re starting to see how it all works in terms of a series of layers. If you’re feeling a bit overwhelmed, don’t stress! This is still early days in our journey. We’ll come back to these concepts several more times over the remainder of the course.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nTry plotting some of the numerical relationships among the penguin data using scatterplots. Things you might try are:\n\nFlipper length and body mass\nBill length and body mass\nBill length and bill depth, colored by species\n\n\n\nOnce you’re ready, head over to the Lab Exercise…"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 3 Lab",
    "section": "",
    "text": "Introduction\nVisualization is an important aspect of data science because it can reveal patterns that are not immediately obvious in raw data, and it can be used to quickly and effectively communicate about data. This lab is focused on introducing an approach to visualization using a “grammar of graphics”. In this lab you will\n\nUnderstand the “grammar of graphics” approach and how it is implemented in the ggplot2 package\nLook at how to plot combinations of categorical and numerical data as amounts, distributions, and relationships using bar charts, histograms, boxplots, and scattterplots\nHow to use aesthetic mapping to look at multiple variables in the same graph."
  },
  {
    "objectID": "LabExercise3.html",
    "href": "LabExercise3.html",
    "title": "5  Lab Exercise 3",
    "section": "",
    "text": "In this exercise, you’re going to work on different kinds of plots using ggplot2. Create a (commented) script in R to document your code. Your datasets will be:\nThe iris dataset\nThe mtcars dataset\nThe UKgas dataset\nEach of these contains combinations of categorical and numerical variables. Descriptions of these datasets can be found using the ? to access R help. Using data in these datasets, create a barplot and a histogram using the appropriate data types from of these.\nFinally, using the gapminder dataset (from the gapminder package), create a subset of data from European nations, then plot GDP and life expectancy, coloring the points by\nOnce you’re done, submit the script and all 3 plots to the Canvas assignment page."
  }
]