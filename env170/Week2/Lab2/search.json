[
  {
    "objectID": "01_FileSystems.html",
    "href": "01_FileSystems.html",
    "title": "2  File systems in R",
    "section": "",
    "text": "During the first lecture this week, we discussed some strategies for keeping files organized. Today’s lab will assume that you are using a hierarchical file structure that you are comfortable with.\n\nR projects and the working directory\nR projects are a useful way to keep track of all the files (scripts, data, and outputs) associated with a specific activity. Open the File drop-down menu and select New Project. You should see the following window:\n\nSelect New Directory. That will bring up this window:\n\nThis window gives you quite a few options for different project types. We’ll learn more about some of these, particularly Quarto documents, later in the course. These give us ways to combine code and text (and more) into a single, shareable document. The lecture slides and lab sheets are all generated as Quarto documents.\nFor now, let’s just select New Project. That brings up this window:\n\nAt this point, we are creating the working directory. The working directory is the current folder that R is using to read and write files.\nYou have two tasks here: the first is to figure out the folder where you want to put the working directory, and then to give the working directory its own a folder name. To figure out where to put the working directory, you can use the Browse button to navigate to the folder you want to use. We discussed hierarchical folder structures earlier this week, and I suggest keeping this in mind as you select a folder to store this project. As you can see in the image, I’m keeping things in Box, in a folder structure that goes\nBox/Courses/ENV170/Week2\nYou may have a different structure that works for you. Whatever you do, don’t select a folder on a lab computer hard drive! These are wiped clean each night, which will erase any work you’ve done.\nNow it’s time to name the working directory. I’m going to call this directory Week2Lab, and I suggest you do the same as it will help the rest of the lab make sense. In practice you can call this directory anything you like, but it’s worth keeping in mind some of the file naming conventions we discussed earlier. Once you’re done here, you can click Create Project.\nNow RStudio should be open, with the R opening text in the console, and the Files tab open in the Output pane. It should look something like this:\n\nThis is showing the contents of the Week2Lab folder, which is our working directory. The only item inside should be the project (.Rproj) file, which tells R about the working directory and file environment when you open the project later.\nThe important thing to remember now is that this directory is where R is working. This means that R will assume that files you want to import will come from here, and any files it generates will be saved here by default.\n\n\nSaving a file to the working directory\nLet’s test this out. First, go to the File drop-down menu and select New, and then R Script. We used these last week, but as a reminder, these are text files that can be used to write and run R code.\nNext, let’s add some code:\n\n#plot iris data\nplot(iris$Petal.Length,iris$Petal.Width)\n\nThis code should look familiar: it’s the plot function, which creates a scatterplot using two vectors as the x and y variables. Here we are using it to plot the iris dataset: a well-known set of data about irises collected in the early 20th century. This is built in to R mostly for learning and testing purposes.\nIf you select this code and click Run (or push Ctrl + Enter), you should see a plot that looks like this:\n\nYou can take a minute to look at this plot and note any interesting patterns. To save the script, we can go to the File drop-down menu and select Save. This will bring up a dialog box that should show the working directory. Give the script file a name like irisPlot to indicate what it is and then click Save. You should now see it show up in the Files tab of the Output pane:\n\n\n\nWorking with directories\nThere are three main ways to interact with the file system in R: from the command line, from the File tab in the Output pane, and from outside of RStudio. You may find one of these works better for you, but you’ll also probably end up using all of these different approaches from time to time so it’s good to cover them all.\n\nFrom the command line\nFrom time to time, you may find that you are not sure which directory you are working in, especially if you end up opening files from multiple projects. To get the current working directory from R, you can use the getwd function:\ngetwd()\nThis returns the following directory path:\n[1] \"C:/Users/bdav_/Box/Courses/ENV170/Week2/Week2Lab\"\nYours will likely look different than mine, but it should be the complete path all the way back to the hard drive where your work is stored (here it is the C drive). There’s a couple of interesting things to notice about this:\n\nThis function doesn’t take any arguments. There are a few function in R that don’t require any arguments to run, and this is one of them. In such cases, you can just use open and closed parentheses () after the function name.\nWhen R refers to a directory path, it uses forward slash / rather than the backslash (\\). This is to avoid conflicts with string escapes (e.g., \\t to insert a horizontal tab in a character string). You can also use double backslash (\\\\).\n\nIf you ever need to manually change the working directory, you can use the setwd function, which only takes a string with the working directory. You can try this out with the following code, replacing your-working-directory with the path to your own working directory:\nsetwd(\"your-working-directory\")\nIf you’ve forgotten what that path is, you can use getwd or you’ll see it at the top of the Files tab in the Output pane:\n\nYou can create a new folder inside the working directory (called a subdirectory) using the dir.create function. For example:\ndir.create(\"TisButAFolder\")\nThis function takes the name of a folder as a character string argument. Now if you look in the File tab, you should see this new subdirectory:\n\nAt this point you could save things to this folder, but let’s say we created this folder by mistake. We can delete a subdirectory using the unlink function:\nunlink(\"TisButAFolder\", recursive = TRUE)\nLike magic, the folder is gone. The recursive = TRUE argument here tells R to delete the directory itself, not just the files within. There are additional functions for dealing with files from the command line, such as:\n\nlist.files If you provide a directory path to this function, it will tell you the names of all the files in it.\nlist.dirs Same, but for subdirectories\nfile.choose This function will open a File Selection window that will allow you to navigate to file on your machine. It is another function that doesn’t require any arguments to run.\n\n\n\nFrom the Files tab\nThe Files tab on RStudio looks much like a File Explorer window on most computers. Right now, it should be pointed at the working directory, so you should be able to see the R project file and the irisPlot.R script. There’s a few different ways to navigate here:\n\nTry clicking on the two-dot ellipsis (..) at the top of the list. This will take you into the next folder level up, also called the parent directory. In my case, this is the Week2 folder.\nTry clicking on the folder called Week2Lab. This will take you back into that directory.\nTry clicking on the three-dot ellipsis (…) at the far right of the This opens up a File Explorer window where you can navigate to a new directory. Use this to back up to the parent directory.\nClick the small blue cube with an R in it next to the three-dot ellipsis. This will immediately take you back to the working directory.\n\nThere are a few buttons at the top of this window to do some additional file operations. We’ll look at first three:\n\nNew Folder This will let you add a new subdirectory in whatever directory you are currently viewing. Create one called TisButAnotherFolder. Click OK. Once it is there, click on that folder to open it.\nNew Blank File This is a drop-down menu to quickly create a blank file. Create an R Script called TisButAScript.R. Click OK, then use the R cube button to return to the working directory.\nDelete This deletes whatever is selected in the File tab. Click the check box next to the TisButAnotherFolder folder and click delete. You’ll get a warning about this being permanent. Click Yes. You’ll then get a second warning about the script we had in there.\n\nIt’s also worth taking a look at the More drop-down menu, as this has a number of other file operations, like Copy and Paste. The Set As Working Directory option will turn whatever folder is open in the File tab and turn that into the working directory. Finally, you can use Show Folder in New Window to open the current folder in a File Explorer window outside of R. Try that one out before we move on to the next section.\n\n\nFrom outside RStudio\nIt’s really important to recognize that the file structures we are using in RStudio are also part of the file system of the computer you are working on. It can be helpful to know how to access these folders and files from outside R as well. Here, I’ll explain how to do this if your setup is similar to mine, using Windows 11 and Box.\n\nOpen the File Explorer by clicking the folder icon on the taskbar. Looks like this:\n\nOn the left-hand side, you should see a series of options for different directories (e.g., Desktop, Download, etc.). Navigate to Box and expand it.\nInside Box, you’ll have a set of subdirectories based on what you have saved there. Navigate to the top-level folder where you keep your coursework and expand it. For me, this is a folder called Courses.\nContinue to expand until you reach the folder where your project is stored, the working directory. Remember, you can always check this using getwd() or looking at the top of the File tab. For me, this is Courses/ENV170/Week2/Week2Lab\nHighlight that folder\n\nNow you should be in a folder that looks like this:\n\nCongrats, you’re in the working directory! You can now use the mouse to add files by dragging them, or your can copy and paste them from another folder. To delete files, just highlight them and press delete!\nThe way to find your working directory outside RStudio will vary somewhat between operating systems (e.g., Windows, iOS, Linux) and hardware configurations (hard drives, partitions, etc.). This will also be true if you’re working from a cloud-based storage option like Box that you access from more than one machine. For this reason, it is a good idea to get familiar with how folders and files are organized on your computer.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nAs the course goes on, you’ll be downloading data from a number of different sources, and this data will need to make its way to your R project. Let’s get used to doing this whenever we start a lab or assignment.\nFrom the File tab, create a new subdirectory in your working directory called Code and move the irisPlot.R file there.\nFrom the command line, create new subdirectories in your working directory called Data and Outputs\nGo to the Week 2 module on Canvas and download the Week2Data.zip file to the Downloads folder on your computer.\nFrom outside of R, find the Week2Data.zip file and unzip it in your Downloads folder, then move the contents ofthat folder to the Data subdirectory (there should be no additional subdirectories inside your Data folder)\n\n\nThis section is meant to help you become familiar with how to work with file systems. The most important thing is that you try and keep the files associated with a project together in a working directory and to keep that directory organized. It’s OK if you don’t know exactly where things are yet, or all of the functions you’d use, just remember that you have a few different options as how to navigate the file system."
  },
  {
    "objectID": "02_ImportExport.html",
    "href": "02_ImportExport.html",
    "title": "2  Importing and exporting data",
    "section": "",
    "text": "In the first week we entered data by hand into vectors, and then combined these vectors into matrices and dataframes. However, if we’re going to be making use of larger datasets, we would probably prefer to have the machine read the data for us. Likewise, if we have reorganised or generated data in R, it would be useful to extract that data in a format that would be machine readable for another user."
  },
  {
    "objectID": "06_Week2LabExercise.html",
    "href": "06_Week2LabExercise.html",
    "title": "7  Week 2 Lab Exercise",
    "section": "",
    "text": "For this exercise, we’re going to use the skills we’ve gathered so far to look at daily temperature variability using three years worth of weather data from Rarotonga. Follow these steps to complete this assignment:\nDownload the RarotongaWeather2020.csv file from Canvas and save it to the Data folder. Create a new R script called tempAnalysis and save it to the Code folder.In this script, write code and comments that will do the following:\n\nRead the raroWeather2020.csv file into R as a tibble\nCombine the 2020, 2021, and 2022 tibbles by row into a single dataset\nCreate a new column called tempDiff that gives the difference between the maximum and minimum temperature for the entire dataset (note: there may be a fair number of NA values here)\nExport the modified data to a .csv file and save it to the Data folder\nMake a histogram of the temperature differences for the period 2020-2022. Make sure to use the main and xlab arguments to give the histogram an appropriate main title and x-axis label. Save the histogram image to the Output folder.\nBe sure to save all the components of this project.\n\nFor the submission, include the histogram, your script, and the combined .csv file. Grading criteria can be found on Canvas.\n\n\n\n\n\n\nStretch activity (optional)\n\n\n\nIf you haven’t had enough R for one night, here’s a little extra just for fun:\nRight now, the DATE field is stored as character strings, but if we wanted to use this for visualization, we’d need objects that treat these as sequential dates.\nWhen you loaded tidyverse, you also loaded a package called lubridate, which helps you convert between date formats. Search the help for the ymd function. This and others like it transform dates that are in particular formats (e.g., year-month-day). Figure out which one you would need to use for the dates we have, then use it to convert the character dates into date objects. You’ll know you got it right if you can plot average temperature by date."
  },
  {
    "objectID": "04_ExportingData.html",
    "href": "04_ExportingData.html",
    "title": "5  Exporting data",
    "section": "",
    "text": "As a final step, we’ll take our tibble data and export it back to a .csv file. The write_csv function will get us there:\nwrite_csv(raro21_22,\"Data/raroWeather2Year.csv\"\nThis is taking two arguments: the first is the tibble where our data is stored, and the second is a path where we want to save it as a .csv file. In this case, we’ve added the Data folder to the path so, rather than just having the file end up in the working directory, it will go the correct folder, which you can see by clicking on the Data folder in the File tab:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 2 Lab",
    "section": "",
    "text": "Before we can begin to do any visualization or analysis, we need to be able to get data obtained from a data source into R. Doing this requires that we know how files are organized in the file system, and how the data behaves once it is imported. This lab is aimed at building upon the concepts discussed in the first session by exploring ways to access and manipulate data in R. In this session you will learn about:\n\ndealing with files, folder structures, and working directories in R\nimporting and exporting data files as tibbles\nmodifying and appending datasets"
  },
  {
    "objectID": "02_ImportData.html#footnotes",
    "href": "02_ImportData.html#footnotes",
    "title": "3  Importing data",
    "section": "",
    "text": "The term “tibble” refers to the data class tbl_df↩︎\nThese are enumerated here: https://adv-r.hadley.nz/vectors-chap.html#tibble↩︎"
  },
  {
    "objectID": "03_WorkingWithData.html#footnotes",
    "href": "03_WorkingWithData.html#footnotes",
    "title": "4  Working with data",
    "section": "",
    "text": "You may remember that you can also use the square brackets to access the column values in a dataframe (e.g., raro21_22[,4] to get the 4th column). However, if you do this with a tibble, it will return a 1-column tibble just as it did above. This would need to be handled differently than the vector generated using the $ operator.↩︎"
  },
  {
    "objectID": "05_WrappingUp.html",
    "href": "05_WrappingUp.html",
    "title": "6  Wrapping up",
    "section": "",
    "text": "Learning to code happens slowly at first, but it’s worth taking a moment to enumerate what we’ve learned to keep those steps in perspective. So far, we’ve covered:\n\nhow to navigate R and RStudio\nhow R handles different kinds of data\nhow to work with R at the command line\nhow to assign values to variables\nhow to use functions, including supplying arguments\nhow to make histograms and scatterplots\nhow to create, run, and share scripts in RStudio\nhow to use best practices in file system management\nhow to work with file systems from inside and outside RStudio\nhow to import and export table data\nhow to access and change columns, rows, and values in a tibble\n\nAnd it’s only Week 2! As you progress, some of the steps you’ve learned now will make more complex activities in R more intuitive, and you’ll be able to pick up new skills faster. This week’s lab exercise will build on what we’ve done both last week and this week, using this kind of weather data to do a bit of analysis. When you’re ready, you can move on to the Week 2 Lab Exercise…"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Week 2 Lab",
    "section": "Introduction",
    "text": "Introduction\nBefore we can begin to do any visualization or analysis, we need to be able to get data obtained from a data source into R. Doing this requires that we know how files are organized in the file system, and how the data behaves once it is imported. This lab is aimed at building upon the concepts discussed in the first session by exploring ways to access and manipulate data in R. In this session you will learn about:\n\ndealing with files, folder structures, and working directories in R\nimporting and exporting data files as tibbles\nmodifying and appending datasets"
  }
]