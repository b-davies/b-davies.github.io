[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 5 Lab",
    "section": "",
    "text": "Introduction\nWe’ve now seen different aspects of the cycle of data science play out in R. We’ve imported data, manipulated, and transformed it. We’ve visualized it using different kinds of graphical elements. And we’ve explored it from different angles.\nAt the end of the day, we want to be able to communicate our efforts to others. One major reason is that we want our work to be replicable, and for others to be able to build upon it. Those others will likely include our future selves. So far we’ve learned to use comments as a way to leave notes about what our code is doing, but these are very limited and do not give us much room to emphasize, enumerate, and represent complex ideas and reasoning.\nIn this lab, we will be learning how to use code notebooks to document our work; specifically, we’ll be using Quarto documents, which come bundled with RStudio. By the end of this lab, you will be able to:\n\nCreate a Quarto document and change its settings in the header\nUnderstand the relationship between the source code and visual elements of the document\nModify the look of the text in the document using headers and Rmarkdown\nAdd code chunks and edit their settings to show code, outputs, both, or neither\n\nWhile we’re doing this, we’ll also take this opportunity to refresh ourselves on some of the things we’ve covered so far, such as creating data, using file systems, and dealing with packages. To begin, I recommend, nay, I implore you to set up a file system, including a folder for storing data."
  },
  {
    "objectID": "01_IntroducingQuarto.html#introducing-code-notebooks-and-quarto",
    "href": "01_IntroducingQuarto.html#introducing-code-notebooks-and-quarto",
    "title": "1  Introducing code notebooks and Quarto",
    "section": "1.1 Introducing code notebooks and Quarto",
    "text": "1.1 Introducing code notebooks and Quarto\nHeader 3\n\n1.1.1 Editing a Quarto document\nHeader 4\n\n1.1.1.1 Headers\nYou can change the heading by using a dropdown menu in the editor bar at the top of the document:\n\n\n\n\n\n\n\nTry it yourself!\n\n\n\nAdd a header to your Quarto document that reads “Let’s get started”, and set it to the Header 3 level.\n\n\nHeaders also allow for an in-built outlining, which you can see at right. This can be used to jump between sections as your document grows:\n\n\n\n\n\n\n\n1.1.1.2 Text\nText is simply that: text you add to your document. You can make modifications to the text style using buttons on the, much like a word processor like MS Word.\n\n\n\n\n\nThe first two should be familiar:\n\nBold\nItalics\n\nThe last option, &lt;/&gt;, indicates that you want the text to be rendered in the font used for code:\n\nCode\n\n\n\n\n\n\n\nTry it yourself!\n\n\n\nAdd some text that totally oversells the simple R operation you’re going to do next. Modify some element of it with bolding, italics, or code formatting.\n\n\n\n\n1.1.1.3 Code Chunks\nCode chunks are pretty much what they sound like: a section of code run separately from the rest of the code. You can add a code chunk using this button on the editor bar:\n\n\n\n\n\nA blank chunk will look something like this:\n\nAnything added to this grey block after the {r} will work as if it were part of an R script. Y\n\n\n\n\n\n\nTry it yourself!\n\n\n\nAdd a code chunk to your document, and include some code in this that uses rnorm to generate a vector of 500 values with a mean of 0 and a standard deviation of 1, then plots these as a histogram. You can see the result by pressing the green triangle (play) button at the top right of the chunk.\n\n\n\n\n\n1.1.2 Rendering a Quarto document\nWhen we’re ready to share our work, we need to render the entire thing into a document. To do this, we use the Render button:\n\nWhat this does is first takes the entire document and, via the knitr package, puts together all of our different elements as a general markdown file which includes the executed code and any graphics it generates. The markdown file is then translated into the file format we’re trying to create using pandoc software.\nRemember at the outset that we used the default HTML as our output. An HTML document is the kind of document used to create webpages, so this process will take our and create a webpage.\nClick Render, and you should see the Console pane switch to the Background Jobs tab. This should iterate through some text indicating which part of the If all goes well, your default browser should open up displaying your document:\n\n\n\n\n\nIf you look at the search bar, it references localhost rather than a URL (e.g., http://www.tufts.edu). This is because the HTML document you’re viewing is currently currently on your hard drive rather than on a file server. However, if you look in your Files tab, you should see that you now have two new things: an HTML (.html) file and a corresponding folder with the suffix “_files”. If you were to copy these to a file server, they would be visible as a website that others can access.\nSome common issues that may arise when rendering your Quarto document:\n\nIf you reference a function from package that is not loaded in your document, it will create an error and stop the process. In this case, just add a code chunk with the library function (e.g., library(tidyverse)). Don’t include calls to install.packages in the document! The rendered document will include the packages you’re using as files to be included.\nIf you try and run some code that produces an error, it will notify you and stop the process. Go back to that section and fix the error.\nIf you’re storing things on a cloud-based drive, this can sometimes interfere when it syncs.\n\n\n\n\n\n\n\nTry it yourself!\n\n\n\nAdd a second header to your Quarto document entitled “Let’s get continuing!”, include some text that touts your data science prowess, and use it to produce a histogram from the same data using different arguments for breaks and col. Keep in mind that if you already stored your vector of random values as an object, you won’t need to run rnorm again."
  },
  {
    "objectID": "01_IntroducingQuarto.html#footnotes",
    "href": "01_IntroducingQuarto.html#footnotes",
    "title": "1  Introducing code notebooks and Quarto",
    "section": "",
    "text": "To publish directly to PDF, we need to make sure that you have a distribution of the typesetting software LaTeX installed (incidentally, Knuth is the author of LaTeX’s progenitor, TeX). You can do this by running install.packages(\"tinytex\") from the command line.↩︎"
  },
  {
    "objectID": "02_FileHandlingQ.html",
    "href": "02_FileHandlingQ.html",
    "title": "2  Looking under the hood",
    "section": "",
    "text": "Most of the operations we just used to create our document took place in the editor bar:\n\nThis bar is included as part of Quarto’s visual editor. The visual editor lets you modify a document using a WYGIWYM (What You See Is What You Mean) interface, so the things that you see in the document (e.g., bolding, headings, code outputs) are rendered more or less as you would expect them to appear, but with some markings and controls embedded in the document (for example, the play button on the code chunk).\nThe Quarto document itself is actually a script written using Markdown language, which is used for formatting documents that are a mix of text and executable code. The Visual Editor takes these elements and shows them to you in a way that lets you assess their visual look, but the actual .qmd file you’re creating looks a little different…\n\n2.0.1 Quarto source editor\nAt the left side of the editor bar, you can toggle between the visual editor and the source editor:\n\n\n\n\n\nWhat you see should now should look similarly to the document we were working on, except that the formatting has been removed. The source shows what the .qmd file looks like in reality: a text file with some additional In fact, if we took this out of RStudio and opened it in a text editor like Notepad, it would look something like this:\n\nWhat you’re seeing here is an example of Markdown, which is a text file where particular sequences of symbols are translated into text formatting and code chunks. For example:\n\nHash marks (###) are used to indicate header level\nBold text is surrounded by two asterisks **\nText in italics will be surrounded by single asterisks *\nText in code format will be surrounded by single backticks `\nCode chunks begin and end with three backticks ```\nCode chunks will usally begin with curly braces containing the language being used ({r})\n\nMarkdown enables the literal programming approach because, as you can see, even with thie additional symbols this document is still very much readable.\nPay particular attention to what’s happening inside the code chunk. What this section is doing is telling Markdown (and subsequently Pandoc) that this is meant to be read as executable code. As the final output is being rendered, this code will be processed and any outputs will be added to the document.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nAdd to the document you’ve created using the Source editor.\n\nAdd a third header called “This is the third section!”\nAdd some text to further emphasize your data science skills, and modify it with bolding, italics, or code formatting (make sure not to attempt this inside a code chunk!)\nAdd a code chunk that include code that uses runif to generate two vectors of 500 random values between 0 and 1, and then plots them using the plot function.\n\n\n\nYou can edit your document in the source code editor, then switch back to the visual editor to see what your document will look like. Some more complex elements (for example, adding raw HTML code) will not show up formatted correctly in the visual editor, but will when the document is rendered.\nYou might be asking yourself why you would ever use the Source when you can use the Visual Editor. The short answer is that, like other word processing software, there’s room for software error, especially when a document becomes large or formatting becomes very complex (alternating between code formatting and italics in a single line, for example). If something doesn’t look right, you can use the source editor to check what’s going on underneath the hood.\n\n\n2.0.2 Modifying the YAML header\nThe YAML header is where you can include settings that you want applied across the whole document. For example, here I’ve added a few\n\n\n\n\n\nHere, I’ve added a field for the date, and changed the way the HTML document using code-fold, which will take the code chunks and make them hideable/expandable. Feel free to modify your YAML to include the same options.\nThere are a lot of ways you can modify the YAML header to change the way the document behaves, including adding tables of contents and bibliographies from bibliography managers like EndNote and Zotero. We won’t go into these in too much depth for the moment; if you’re interested in how these work, you can read more about them here. There are also ways to apply settings to individual sections and code chunks. We’ll look at a few of these in the next section.\n\n\n2.0.3 File handling with Quarto Documents\nOften, the work that we are documenting in a Quarto document will involve some external dataset: for example, data stored in a .csv file. We’ve dealt with importing data from outside of R before.\nThe same is true when working in a Quarto document. The default working directory for a Quarto document is the directory where it is saved, and file paths are considered relative to that position.\nDownload the abalone dataset from canvas and save it in a subdirectory within your working directory called “data”. Then you can create a new code chunk with the following:\n\nlibrary(tidyverse)\nabalone&lt;-read_csv(\"data/abalone.csv\")\nabalone\n\nWhen you do this yourself, you should see two different windows here: one with the messages that come up when you call the tidyverse library and use the read_csv function, and another displaying a table with the abalone data. Our Quarto document now has access to the abalone data.\nAn important caveat here: if you want to share a Quarto document that is using an external data file, you need to also include that data file, ideally in the same relative location to your Quarto file. So, for example, if your data file is stored in a subdirectory called “data”, then you’d want to send both the Quarto document and that folder with the data file inside it. We’ll cover this in class later this week."
  },
  {
    "objectID": "03_VisualizingQ.html",
    "href": "03_VisualizingQ.html",
    "title": "3  Modifying the look of the Quarto document",
    "section": "",
    "text": "While the text editing capabilities of Quarto documents are useful, the main attraction is the ability to combine the information. However, depending on our audience and what we are trying to communicate, we may want to include different components in the rendered product. There are also\n\n3.0.1 Code chunks\nWhile the code chunk at the end of the last section showed three lines of code, the document I was looking at in my visual editor actually included an additional line:\n\n\n\n\n\nThe #| echo: true line here is a local instruction to the code chunk to change one of the settings. This only applies to this code chunk, and these instructions won’t show up in the rendered version of the document.\nLet’s break it down. The #| symbol indicates that I want to give an instruction, and you’ll see this now shows up in a lighter color. The echo: option relates to the visibility of the code (if you think of code as instructions being issued, having it echo means having it repeated back to you before giving the output). Finally, this is set using a logical (true/false) value. So it’s saying to Quarto: “I want you to show the code here.” If I had instead set echo: to false, like so..\n\n\n\n\n\n..then when I render the document, the table of abalone values would show up without any code.\nThese local option are used to suppress different kinds of activities in the code chunk. For example, the eval option will determine whether the code chunk will be run or not. This is helpful if you just want to show some code, but don’t want it to produce an outcome. Likewise, setting fig-show: hide will hide whatever plot is generated by the code. These options and their effects are listed in the table below:\n\n\n\nWickham et al. 2023 R for Data Science\n\n\nKeep in mind that these are local effects, so whatever they are doing, they are only doing in that code chunk.\n\n\n3.0.2 Additional elements\nSo far we’ve mostly talked about basic things you’d want to do with a . There are additional elements we might want to add to make our document more complete, including lists, tables, links and We’ll go over each of these in the sections below:\n\n3.0.2.1 Ordered and ordered lists\nLists are useful for quickly outlining points or aspects of your data. You can start a list by clicking one of these buttons on the editor bar:\n\n\n\n\n\nUnordered lists use bullets, while ordered lists use numbers. For example, you could take the following text:\nChocolate\nVanilla\nCookie Dough\n\n\n3.0.2.2 Tables\nSometimes you may want to show information in a table. To do so, you can select Add Table from this drop-down menu:\n\n\n\n\n\nThat brings up a dialogue box that looks like this:\n\n\n\n\n\nHere you can set the number of rows and columns of the table, Then you can fill in values\n\n\n\n\n\nAnd it will render like this:\n\n\n\nName\nFavorite Ice Cream\nLeast Favorite Ice Cream\n\n\n\n\nTara\nRocky Road\nRum Raisin\n\n\nPrecious\nCookie Dough\nCoffee\n\n\nJuana\nChocolate\nFrench Vanilla\n\n\nMonica\nCookie Dough\nStrawberry\n\n\nEverett\nRaspberry\nCoffee\n\n\n\nThere are also ways to render data stored in a tibble as a table, but this isn’t useful unless your data set is very small. We’ll cover how to do this in a later lesson.\n\n\n3.0.2.3 Links\nYou can add hyperlinks to your (non-code chunk) text by selecting it and then clicking the Link button in on the editor bar.\n\nThis will bring up a dialogue box that looks like this:\n\n\n\n\n\nYou then have some options you can work with, including whether to link to a URL (an outside webpage) or to a header within the document. The latter can be useful if you have a large document and need to refer to different sections of it. You can also add some tooltip text that will show up when you hover the mouse over the link.\nFor example, if I had text like this:\n This plot is for all the bobcars out there.\nI could highlight the word bobcars, then add a link to a relevant webpage, which would render like this:\n This plot is for all the bobcars out there.\n\n\n3.0.2.4 Images\nSometimes you may have an image you’d like to include in your document that is not generated by a code chunk. For example, if you’re doing a study of bobcat ranges, you could add an image of a bobcat. To do this, click the Image button:\n\n\n\n\n\nThat will bring up a dialogue box that looks like this:\n\n\n\n\n\nFor the first field in this dialogue, you can either specify a location of a file stored on your computer or a URL for an image on the web. For example, I could use\nThe alignment setting will tell you where on the page you’d like the image to appear. Alternative text refers to a text description of the image which is used for accessibility purposes. You can also add a caption, which is also a good place to add a citation for the image. For example, I could use the image here by adding the URL, then I can add a caption that includes information about where I found it.\n\n\n\nBy Maria de Bruyn - https://www.projectnoah.org/spottings/10011526/fullscreen, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=127865860\n\n\n\n\n\n\n\n\nTry it yourself!\n\n\n\nIn your Quarto document, load the modeldata package create a new heading for “Sacramento Home Sizes” Under that heading, add the following elements:\n\nSome text discussing what your data are, linking to a website about Sacramento\nAn image of the Sacramento skyline (with citation in caption)\nA code chunk that loads the modeldata package and produces a boxplot of home square footage by type"
  },
  {
    "objectID": "04_LabExercise5.html",
    "href": "04_LabExercise5.html",
    "title": "4  Lab Exercise 5",
    "section": "",
    "text": "In this exercise, we’re going to conduct a (very brief) exploratory analysis and document it using a Quarto document. There will be four headers in this document:\n\n4.0.1 First header: About the project\n\nSome text noting that the data are recordings of abalone from coastal Tasmania, with a link to the data source, and also note that all values are transformed by dividing by 200.\nAn image of an abalone with a caption indicating the common and scientific name\nAn unordered list of variables recorded in the abalone dataset (think about where variable names are stored)\n\n\n\n4.0.2 Second header: Modifying the data\n\nRead the data in as a tibble\nCreate a new column that converts the diameter to mm, and then to inches\nCreate a new column that converts the length to mm, and then to inches\n\n\n\n4.0.3 Third header: Length vs. Diameter\n\nSome text describing which variables are being plotted and what sort of pattern you see\nA code chunk that produces a 2D bin plot with the abalone length and diameter\n\n\n\n4.0.4 Fourth header: Diameter vs. Rings\n\nSome text describing which variables are being plotted and what sort of pattern you see\nA code chunk that produces a scatterplot with the abalone diameter and its ring count\n\nWhen you’re done, save your .qmd file and submit it to Canvas."
  }
]