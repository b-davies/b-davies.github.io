[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 1 Lab",
    "section": "",
    "text": "Introduction\nThis week’s lab is aimed at familiarizing you with R and RStudio. R is a “free software environment for statistical computing and graphics.” While R was built primarily for statistical work, it serves many functions that extend well beyond statistics. R works as both a scripting environment (where programs are written and then run) and a command line interface (where commands are entered and return values immediately). R and its packages are freely available and are supported by a large user base.\nBefore we can get to working with data and , it is important to understand some fundamental concepts in computing and how they work in R, specifically. In this section you will learn how to:"
  },
  {
    "objectID": "index.html#a-note-on-completing-these-exercises",
    "href": "index.html#a-note-on-completing-these-exercises",
    "title": "Week 1 Lab",
    "section": "A note on completing these exercises",
    "text": "A note on completing these exercises\nThese exercises use different conventions to represent the code to be typed into the command line and the results you get back. The code you are meant to enter is presented in blue monospaced font. For example:\nsomedata&lt;-rpois(100,10)\nIf you are meant to provide a value for a part of the code, that section will be italicized:\nprint(\"yourname\")\nResults from R that are returned at the command line are indicated in bolded, purple monospaced font:\n[1] 17  4  8  9 13 12  9  6  6 11\n[1] \"Ben\"\nIt is possible to copy and paste code from this document directly into the command line, but for now I recommend that you enter to code yourself to get a sense of how command line operations work."
  },
  {
    "objectID": "01_NavigatingR.html",
    "href": "01_NavigatingR.html",
    "title": "Navigating RStudio",
    "section": "",
    "text": "R can be operated using the command line interface alone, but this course will make use of RStudio for dealing with R code. RStudio is an integrated development environment (IDE), which is used to help operate R, organize R code, and handle visualisation within the same window. The IDE makes the job of interacting with R a lot easier.\nTo begin, open RStudio. You should see a window that looks like this:\n\n\n\nRStudio interface\n\n\nThere are four main areas that you should be concerned with at this stage:\n\nDrop-down menus These function in much the same way that menus in other programs do. The File menu, for example, is where you can create, open, save, and close files.\nEnvironments pane This pane contains information related to the information currently stored in the system. In particular, there are two tabs which show either the objects stored in the current session (Environment), or the history of commands entered at the command line (History).\nConsole pane Contains the command line, where commands are passed to R by the user.\nOutput pane Includes five tabs where outputs (e.g., plots) and other R features can be viewed (discussed below). At the start, this is showing the file system in the current working directory.\n\nAn additional pane, the Source pane, is typically hidden when first starting RStudio, and will be discussed later.\nMost activity takes place in the Console pane. Depending on what actions you are undertaking in the Console pane, different things may occur in the Output and Environment panes. To see how this works, try typing the following command into the command line (indicated by an &gt;) in the Console pane, and then press enter:\nhist(rnorm(50,0,1))\nThis piece of code uses the hist function to generate a histogram (frequency plot) of some data referenced inside the next set of brackets. Those data are a set of 50 random numbers drawn from a normal distribution, generated using the rnorm command, with a mean of 0 and a standard deviation of 1.\nThe Navigation pane should now jump to the Plots tab, and the result should look something like this:\n\n\n\nA histogram of 50 random, normally distributed numbers\n\n\nIt’s OK if the plot you see looks a little different from the image above: your instance of R will generate different sets of random numbers, but you should see a histogram that is centered near a value of 0.\nIt’s also more than OK if you don’t understand how the code works at this stage, the point here is just to demonstrate how the command line works and how different components of RStudio operate in order to visualise ‘data’. In addition to Plots, other tabs in the Navigation Pane include\n\nFile Provides a file explorer for your computer, with the default file open to the working directory.\nPackages Shows which function packages (also sometimes called libraries) are installed on this computer and active in this session.\nHelp Provides access to R help documentation, this opens automatically when calls for help are made at the command line using ? or ?? (we’ll learn about this very soon).\nViewer Displays locally generated documents (HTML, PDF, etc).\nPresentation Displays outputs from a Quarto presentation (we’ll learn about these later).\n\n\n\n\n\n\n\nTry it yourself!\n\n\n\nHave a look through the drop-down menus and try and find the following helpful options:\n\nInterrupt R This will stop the current operation happening in R. This is critical for instances where R is doing something you don’t expect and you want it to stop.\nComment/Uncomment Lines This will convert highlighted code to comments, or text that is not run by R. This is really useful for debugging your code when you want to try running a code with and without certain parts.\nInstall Packages This opens a window that will allow you to search for packages available through the R package repository (CRAN). Good for when you can’t quite remember the name of a package!"
  },
  {
    "objectID": "02_CommandLine.html",
    "href": "02_CommandLine.html",
    "title": "Working with R at the command line",
    "section": "",
    "text": "Let’s do some more with the command line. First, well start off with a simple expression:\n8 + 2\nOnce you’ve entered this (by pressing Enter or Return), R should immediately return the following:\n[1] 10\nLeaving aside the [1] for the moment, you can see from this interaction R can identify these as numbers, as well as the operator + for addition, so it will perform the addition operation on the two numbers. R uses a number of standard operators for basic math operations, such as:\n\nSome math operators in R\n\n\nOperation\nExample\n\n\n\n\nAddition\n8 + 2\n\n\nSubtraction\n8 - 2\n\n\nMultiplication\n8 * 2\n\n\nDivision\n8 / 2\n\n\nExponent\n8 ^ 2\n\n\n\nBut these sorts of things are about the limits of what R knows by itself. For example, we could throw R for a loop by asking it to add the letter a to the number 2:\na + 2\nThis should produce an error that looks something like this:\nError: object 'a' not found\nYou and I know that you can’t just add the letter a to the number 2. But R doesnt know why this is the case. R doesnt even know what the letter a is. All R knows is that we’ve asked it to add 2 to something unfamiliar labeled a.\n\nAssigning values to objects\nImagine for a moment that this were an algebra problem, and a stood for something that can be added to 2. In algebra, this is known as a variable. In order for the computer to know what the variable a is, we have to define it as an object in the computer’s memory. To define something in R, we use the assignment operator, which is composed of the ‘less than’ symbol and a hyphen, which taken together resemble an arrow like so:\n&lt;-\nFor example, if we wanted to define a as having a value of 8, we can do it this way:\na&lt;-8\nR will read this command as “Let a have a value of 8”. Now if we ask the computer to tell us what a is:\na\nIt should respond like this:\n[1] 8\nR now interprets the letter a as being equivalent to the number 8. If we go back to our original expression of a + 2\na + 2\nwe will get the same answer as 8 + 2:\n[1] 10\nAgain, don’t worry too much about the number in square brackets, we’ll get to that soon.\n\n\n\n\n\n\nTry it yourself!\n\n\n\n\nTry adding, subtracting, multiplying a by other values. What about stringing together multiple math operators?\nThe assignment operator (&lt;-) can work in the other direction (-&gt;) as well! Try assigning 6 to the variable b with -&gt;, keeping in mind what sides 6 and b should be on.\nWhat do you think will happen if you multiply a by b?\n\n\n\n\n\nUpdating a value\nAt the moment, R recognizes the letter a as standing for the number 8. We can change this value simply by reassigning a new value to a:\na&lt;-9\nNow a is 9. And when we add 2…\na + 2\n…we get a new value:\n[1] 11\nGreat! Because R currently reads a as a number (9), we can also assign a new value to the object a using it inside an expression, like this:\na&lt;-a + 1\nR interprets this as something like “Let a have a value of a plus 1”. Since a was equal to 9, this new assignment gives it that value plus 1. So if we look at the value of a…\na\n…we should see it updated from 9 to 10:\n[1] 10\nBy using the assignment operator before the expression, our value for a is now the result of that expression: 10. At the moment, this may not seem very impressive, updating values of stored objects is one of the keys of computer programming.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nTry guessing what the final value of a would be if you entered the following commands in order:\n\na+8\na-5\na&lt;-a+2\na&lt;-16\na&lt;-a/2\n\nNote: sorry if these are purple instead of blue, you can still enter them at the command line!\n\n\n\n\nFunctions\nWe can also perform a number of built-in functions on objects like numbers or variables. Functions operate typically by stating the function name in R, followed by a set of input values, called arguments, that are contained in parentheses (). For example, let’s set to a value of 5:\na&lt;-5\nNow if we wanted to find the square root of the current value of a, we could use the sqrt function like so:\nsqrt(a)\n…we should get the following:\n[1] 2.236068\nAlternatively, a situation might come up where you want to repeat the value of a 10 times. To do this, you can use the rep function:\nrep(a,10)\nThis gives us the following:\n[1] 5 5 5 5 5 5 5 5 5 5\nThe rep function accepts two arguments: the object to be repeated (a), and the number of times it is to be repeated (10). These two items are separated by a comma. The function produces ten instances of the value of a, which is ten 5s. This type of data is called a vector, or a collection of values of a given type (in this case, numbers). Different functions will accept different arguments and produce different types of objects, and this information is given in the Help documentation.\nSo what’s the deal with [1] appearing next to each answer so far? The [1] indicates the position of the value immediately following it in a vector. This is particularly useful when you’re looking at very long vectors. For example, try using rep to create 100 instances of a:\nrep(a,100)\nThe result should look something like this (your position numbers may be slightly different):\n[1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n[37] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n[73] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\nHere, the first line starts contains elements 1 to 36 of the vector. The second line starts at element 37, indicated by the number in square brackets, and contains elements 37 to 72. The last line contains elements 73 to 100.\nMost of R’s functions are vectorized, which means that they work simultaneously across all elements in a vector. We’ll learn more about this later on, but just keep in mind that these numbers in square brackets are just marking position in a vector."
  },
  {
    "objectID": "03_DataObjects.html#footnotes",
    "href": "03_DataObjects.html#footnotes",
    "title": "Looking closer at data objects in R",
    "section": "",
    "text": "The term double refers to “double precision floating point.”↩︎\nR will treat double (“) and single (’) quote marks in the same way. However, the convention is to use double quotes to mark the beginning and end of a string of characters, and to reserve single quotes for instances where the string itself contains quote marks. For example:\ntext&lt;-\"Character objects are sometimes referred to as 'string' objects.\"↩︎"
  },
  {
    "objectID": "04_MyFirstPlot.html",
    "href": "04_MyFirstPlot.html",
    "title": "My first plot",
    "section": "",
    "text": "So far, we’ve learned how to find our way around RStudio, looked at some of the basic concepts of working with data in R, and we’ve built a first dataset out of vectors. But we’ve left out one of R’s primary attractions: the ease and control it provides over visualizing data. To wrap up this lab, we’re going to plot the data we created. We saw the hist function at the start of this exercise, which is used to generate histograms. But let’s say we’re interested in looking at the relationship between the counts of shellfish and their average length. We can do this using the plot function:\nplot(shellfish$count,shellfish$meanLength)\n\n\n\n\n\nThis is a scatterplot, which plots points on two axes. The bottom axis, or x axis, shows the count value for each site, while the left axis, or y axis, shows the mean length for each site.\nThe plot function here is using two pieces of information, or arguments: a vector of values to plot on the x-axis, and a vector of values of the same length (same number of values) to plot on the y-axis. The arguments in a function are separated by commas (,). Our plot uses two columns in our dataset for these arguments, using the dollar sign ($) to refer to the columns of interest.\nIn this case, we’re looking at all shellfish together, regardless of the genus to which it belongs. In the following sections, we’ll look at some additional arguments we might use to change the appearance of the plot.\n\nSymbol\nOftentimes, we may want to use different symbols in a plot, either because an open circle isn’t particularly effective, or to differentiate between different elements in a plot. To change the symbol being used, the argument to be passed to a plot function here is pch, which stands for plotting character. This value is a single whole number which corresponds to a set of plotting symbols. Here are a few examples:\n\n\n\nBase R plotting symbols\n\n\nThere are more symbols available, and there are also ways to add custom symbols, but we’ll cover symbols later in the course when we talk more about visualization. For now, let’s try using closed circles instead of open ones:\nplot(shellfish$count,shellfish$meanLength,pch=16)\n\n\n\n\n\n\n\nSymbol size\nYou can modify the size of the symbol using the cex argument. This argument will take any positive number, and scales to default value of 1. Numbers smaller than 1 make the symbol smaller, numbers larger than 1 make the symbol larger. Let’s say we want our symbols to be 50% larger. We can set cex to 1.5.\nplot(shellfish$count,shellfish$meanLength,pch=16,cex=1.5)\n\n\n\n\n\nNotice how we’re just adding arguments to the plot function? All of these arguments are optional, so if they aren’t entered, some defaults (eg., size 1, open circles) are used.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nOne of the really nice features of R is that it keeps track of your history of command line inputs. By pressing the Up key on your keyboard while the cursor is active in the command line, it will let you go back through the history. This can be really helpful if you want to modify a piece of code you wrote recently. Give it a try in the next section!\n\n\n\n\nColor\nWe can change the color of the circles used in the scatter plot by adding a col argument to the plot function. Let’s start by turning all of them blue:\nplot(shellfish$count,shellfish$meanLength,pch=16,cex=1.5,col=\"blue\")\nThe plot now has a bit of color:\n\n\n\n\n\nYou may have noted also that RStudio highlights the text “blue” in blue: there are a number of character strings that R can interpret as colors, as well as hexidecimal numbers and a few other schemes as well. You can find a good overview of these here.\nBut what if we wanted to use color to give us some additional information? For example, what if we wanted a different color used for each genera we recorded? In this case, we would need to give R a vector that had a color value to correspond with each case. There are a few ways to do this, but since we know that our shellfish data lists the 9 Mya counts first and the 9 Mercenaria counts second, we can just use rep to create a vector of 9 “blue” and 9 “orange”:\nshellfishColors&lt;-c(rep(\"blue\",9),rep(\"orange\",9))\nWe could add this to our dataframe, but it isn’t really data about shellfish, only data we use for plotting purposes, so we’ll keep it as a separate vector. As long as it is the same length as each column (18), R can interpret it as corresponding to those values. So we just replace “blue” with shellfishColors:\nplot(shellfish$count,shellfish$meanLength,pch=16,cex=1.5,col=shellfishColors)\nAnd now the plot looks like this:\n\n\n\n\n\nThe color helps show a pattern in the data. One genus (Mya) seems to be smaller in places with fewer counts and larger in places with higher counts, while the other (Mercenaria) doesn’t seem to have this relationship. This helps illustrate why visualization is important: it helps us to quickly identify patterns in the data that may not be obvious just by looking at a table.\n\n\nAxis labels and titles\nRight now, the labels on our x and y axes are just the column names we gave to the plot function. We can override these using the xlab and ylab arguments, which take a character string:\nplot(shellfish$count,shellfish$meanLength,pch=16,cex=1.5,col=shellfishColors,xlab=\"Number of Individuals\",ylab=\"Mean Shell Length\")\n\n\n\n\n\nWe might also want to add a title to our plot. This is done with the main argument:\nplot(shellfish$count,shellfish$meanLength,pch=16,cex=1.5,col=shellfishColors,xlab=\"Number of Individuals\",ylab=\"Mean Shell Length\",main=\"Shellfish Samples from Cape Cod Study Sites\")\n\nAs you can see, with some functions the number of arguments can get quite long. We’ll learn a few techniques for how to keep track of your code as we go on the course.\n\n\nAdd a legend\nFinally, we should probably add a legend to our plot so we know what color corresponds with what genera. We can’t do this with an argument to plot; instead, legend has its own function, legend, which needs to be used after the plot has been generated:\nlegend(65,3.2,legend=c(\"Mya\",\"Mercenaria\"),pch=16,col=c(\"blue\",\"orange\"))\nThe first two number arguments tell R where to place the legend, using the values on the x and y axes to correspond with the position of the top left corner of the legend. Next, we tell it what the different colored symbols indicate using a vector with each type in it: Mya and Mercenaria.\n\n\n\nSaving your plot\nAs a last step, we can export the plot so we can use it in a report, a poster, a website: anywhere that someone might use visualizations to tell a story with data. There are ways to do this from the command line that we’ll learn later. For now, just click the Export button in the Output pane just above the plot, and select . A window like this should come up:\n\n\n\nThe Save Plot as Image window\n\n\nThis will let you choose where you want to save it, the name you want to give it, and will allow you to change the plot size and file format. For now, give the plot a name (e.g., ShellfishPlot) and then leave the rest as defaults and click Save."
  },
  {
    "objectID": "05_WrappingUp.html#in-class-exercise-1",
    "href": "05_WrappingUp.html#in-class-exercise-1",
    "title": "5  Wrapping up",
    "section": "5.1 In-Class Exercise 1",
    "text": "5.1 In-Class Exercise 1\n\nComplete a short quiz on R and RStudio here.\nNow that you’ve seen how we add the different arguments to the plot function, you can vary the values to make it look differently. Try changing the different aspects of the plot to give it a different look. Some things you might do to really challenge your R skills would be:\n\nUsing different symbols for the two genera\nChanging the location of the legend, making sure that it doesn’t cover any of your points\nPlotting the size of the symbols based on the mean length of shellfish (hint: you may want create a vector from these values and subtract 1 from each value so they’ll fit better)\n\nOnce you’re done, save your plot and send it to me, along with a list of the changes you made."
  },
  {
    "objectID": "05_WrappingUp.html#lab-exercise-1",
    "href": "05_WrappingUp.html#lab-exercise-1",
    "title": "Wrapping up",
    "section": "Lab Exercise 1",
    "text": "Lab Exercise 1\n\nComplete the short quiz on R and RStudio on Canvas. (Note: it may say it is a “practice quiz”, but this will count toward your grade).\nNow that you’ve seen how we add the different arguments to the plot function, you can vary the values to make it look differently. Try changing the different aspects of the plot to give it a different look. Some things you might do to really challenge your R skills would be:\n\nUsing different symbols for the two genera\nChanging the location of the legend, making sure that it doesn’t cover any of your points\nPlotting the size of the symbols based on the mean length of shellfish (hint: you may want create a vector from these values and subtract 1 from each value so they’ll fit better)\n\nOnce you’re done, save your plot and send it to me, along with a list of the changes you made."
  }
]