[
  {
    "objectID": "LabExercise6.html",
    "href": "LabExercise6.html",
    "title": "Week 8 Lab Exercise",
    "section": "",
    "text": "In this exercise, you’re going to work on your skills in data wrangling by modifying tables.\nCreate a file system and add a Quarto document. Use headings to structure the workflow of this lab.\nDownload the greenTransitSurvey.csv dataset, which is a fictional survey of students from three Boston area universities on the number of days they used different low-emissions transport options during the fall and spring semester. Using this dataset, and the functions discussed in this lab, complete the following tasks:\n\nCombine student names to a single column with last name first, first name last\nCreate columns for semester and method of transport\nCreate separate tibbles for each institution\nCreate boxplots for each institution showing how use of different transport methods varied between semesters\n\nSubmit your work as a Quarto document to Canvas. Detailed grading criteria can be found there.",
    "crumbs": [
      "Week 8 Lab Exercise"
    ]
  },
  {
    "objectID": "01_subsetting.html",
    "href": "01_subsetting.html",
    "title": "1  Getting started with wrangling",
    "section": "",
    "text": "Data wrangling includes operations aimed at manipulating data into a clearer or more useful form. This may be for restructuring data into forms that are usable as arguments in analytical functions, transforming values to facilitate visualizations, creating polished data for use by the public, or even just to clarify the look and structure of the data for your own benefit. The kinds of operations that might be undertaken depend on what the data looks like in its raw (received) state. However, there are some common operations that have been built into the packages that make up the tidyverse, and we’ll explore some here.\n\nIntroducing dplyr\nThe dplyr (dee-ply-er) package contains a set of tools designed principally for activities associated with data wrangling. These tools follow a sort of grammar, whereby the name of the function relates directly to what it does to the data (e.g., filter “filters”, select “selects”, etc.). The function name is followed by arguments that follow a general structure:\n\nThe first argument in a dyplr function is always a table (e.g., tibble, data frame)\nFurther arguments describe operations on columns in that table (with column names that are expressed without $ or quotes)\nThe result is always a table\n\nThere’s a few reasons why you might want to use these functions. The first is code clarity: most of the operations we’ve done so far use operators specific to Base R (e.g., $), whereas these have more intuitive names and follow the same patterns across their usage (helping with code readability). Another is that the dplyr tools have been designed specifically with data wrangling in mind, and so contain a number of options and integration that allow for smoother transitions between data states and, ultimately, fewer lines of code.\nTo illustrate how these work, we’ll start by going through some of the functions used to create subsets of data.\n\n\nSubsetting\nOftentimes, the data we receive may have more variables, observations, or values than we would like. Let’s look at the tree inventory dataset:\n\ntreeData&lt;-read_csv(\"data/TS3_Raw_tree_data.csv\")\ntreeData\n\n# A tibble: 14,487 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 14,477 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nHere, we have over 14,000 observations across 41 different variables. There are both practical and analytic reasons you might want to subset this dataset. For example, if you have to regularly refer to a few columns, it may get frustrating to have to keep scrolling across them or calling for a list of column names. Or maybe you are being hired to work on a question about trees in a specific city, and the values from the others are superfluous to your needs. Let’s look at a few functions that can help us address these by subsetting the data into smaller packages.\n\n\nFilter\nThe filter function subsets the data according to a given set of criteria. So, carrying on from our last example, let’s say you were doing an analysis of street trees in Modesto, California:\n\nfilter(treeData,City==\"Modesto, CA\")\n\n# A tibble: 634 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 624 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nQuite clear, yes? The first argument is a table (the treeData tibble), and the second is criteria referring to the City column. The result is another table, but this one only containing observations from Modesto.\nBy itself, this works precisely the same as selecting using the $ operator and square brackets:\n\ntreeData[treeData$City==\"Modesto, CA\",]\n\n# A tibble: 634 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 624 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nSo why bother with filter? Why not just stick with square brackets? This function enables us to make more complex subsets with less code, and the code that it produces is ultimately more readable. We can get a feel for this by asking for additional information. For example, let’s say we wanted to look at data from Modesto and Sacramento. With filter, it would look something like this:\n\nfilter(treeData,City %in% c(\"Modesto, CA\",\"Sacramento, CA\"))\n\n# A tibble: 1,635 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 1,625 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nWe’ve learned how to do this similarly in Base R:\n\ntreeData[treeData$City %in% c(\"Modesto, CA\", \"Sacramento, CA\"),]\n\n# A tibble: 1,635 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 1,625 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nThis doesn’t seem so different; however, when you’re working with square brackets, you need to remember to include the comma at the end of the statement to indicate that you are subsetting row-wise. Woe be it to those who forget that precious comma.\nOK, let’s try something a little more complicated: what if we wanted to filter to all the maple trees in Modesto? Here, we can combine our dplyr code with a helper function from elsewhere in the tidyverse: the str_detect function from the stringr package. This will detect whether a text string we provide matches anywhere in another text string.\n\nmodestoMaples&lt;-filter(treeData,City==\"Modesto, CA\" & str_detect(CommonName,\"maple\"))\nmodestoMaples\n\n# A tibble: 29 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2      43 InlVal Modes… Motow…   2961 -1    -1            ACSA1  Acer sacchari…\n 3      96 InlVal Modes… Motow…   9733 -1    -1            ACSA1  Acer sacchari…\n 4     306 InlVal Modes… Motow…  31877 -1    -1            ACSA1  Acer sacchari…\n 5     309 InlVal Modes… Motow…  32147 -1    -1            ACSA1  Acer sacchari…\n 6     310 InlVal Modes… Motow…  32193 -1    -1            ACSA1  Acer sacchari…\n 7     314 InlVal Modes… Motow…  32333 -1    -1            ACSA1  Acer sacchari…\n 8     318 InlVal Modes… Motow…  33269 -1    -1            ACSA1  Acer sacchari…\n 9     324 InlVal Modes… Motow…  34001 -1    -1            ACSA1  Acer sacchari…\n10     329 InlVal Modes… Motow…  35120 -1    -1            ACSA1  Acer sacchari…\n# ℹ 19 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nDoing this in Base R involves using the grepl function.\n\nmodestoMaples&lt;-treeData[treeData$City==\"Modesto, CA\" & grepl(\"maple\",treeData$CommonName),]\nmodestoMaples\n\n# A tibble: 29 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2      43 InlVal Modes… Motow…   2961 -1    -1            ACSA1  Acer sacchari…\n 3      96 InlVal Modes… Motow…   9733 -1    -1            ACSA1  Acer sacchari…\n 4     306 InlVal Modes… Motow…  31877 -1    -1            ACSA1  Acer sacchari…\n 5     309 InlVal Modes… Motow…  32147 -1    -1            ACSA1  Acer sacchari…\n 6     310 InlVal Modes… Motow…  32193 -1    -1            ACSA1  Acer sacchari…\n 7     314 InlVal Modes… Motow…  32333 -1    -1            ACSA1  Acer sacchari…\n 8     318 InlVal Modes… Motow…  33269 -1    -1            ACSA1  Acer sacchari…\n 9     324 InlVal Modes… Motow…  34001 -1    -1            ACSA1  Acer sacchari…\n10     329 InlVal Modes… Motow…  35120 -1    -1            ACSA1  Acer sacchari…\n# ℹ 19 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nCompare those last two examples in terms of their readability. The code in the tidyverse version more or less follows a pattern consistent with what you are asking it to do (‘filter the data to instances where the city is Modesto and the common name includes “maple”’). The Base R version is a little less straightforward. It uses redundant references to the name of the dataset (treeData), multiple types of brackets, commas separating both arguments and table dimensions, and sometimes reverses the pattern of inputs (data, argument vs argument, data).\n\n\n\n\n\n\nTry it yourself!\n\n\n\nTry writing the following Base R sub-setting routines using the filter function:\ntreeData[treeData$CrnBase&gt;5,]\ntreeData[treeData$`Park/Street`!=\"Park\",]\ntreeData[treeData$ScientificName==\"Pinus radiata\" | treeData$ScientificName==\"Sequoia sempervirens\",]\n\n\nIt should be made clear, though, that anything you want to do in tidyverse can be done in Base R, and if you ultimately decide you are more comfortable with the Base R syntax then there is no harm using it. However, as you work on more complex analyses, and work with messier data, the methods used in Base R will be more and more dependent on coding conventions that were developed without a data science workflow in mind. This creates opportunities for errors to creep in, such as misplaced commas and brackets, incorrect orders of arguments, etc. The tidyverse grammar offers more straightforward path through the data science. We’ll illustrate these concepts with a few additional functions below.\n\n\nSelect\nThe select function allows us to select particular columns to include in a smaller dataset. For example, let’s say that we are interested only in some of the measurements on the trees and less concerned with their location. We can use select by first giving the data table, followed by the names of the columns:\n\ntreeMetrics&lt;-select(treeData,DbaseID,ScientificName,`DBH (cm)`,`TreeHt (m)`,`Leaf (m2)`)\ntreeMetrics\n\n# A tibble: 14,487 × 5\n   DbaseID ScientificName                    `DBH (cm)` `TreeHt (m)` `Leaf (m2)`\n     &lt;dbl&gt; &lt;chr&gt;                                  &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1       1 Acer saccharinum                         2.5          2           2.5\n 2       2 Betula pendula                           2.5          1.5         1.9\n 3       3 Celtis sinensis                          2.5          1.8         2.2\n 4       4 Cinnamomum camphora                      2.5          2           2  \n 5       5 Fraxinus angustifolia 'Raywood'          2.5          2           2.2\n 6       6 Fraxinus excelsior 'Hessei'              2.5          2           2.2\n 7       7 Fraxinus holotricha                      2.5          2           2.2\n 8       8 Fraxinus pennsylvanica 'Marshall'        2.5          2           2.2\n 9       9 Fraxinus velutina 'Modesto'              2.5          2           2.1\n10      10 Ginkgo biloba                            2.5          1.6         1.3\n# ℹ 14,477 more rows\n\n\nNote that here we are using the backticks to indicate non-conforming column names (i.e., column names with whitespace or other meaningful symbols in R). Again, we could do this with square brackets by giving it the column indices:\n\ntreeMetrics&lt;-treeData[,c(\"DbaseID\",\"ScientificName\",\"DBH (cm)\",\"TreeHt (m)\",\"Leaf (m2)\")]\ntreeMetrics\n\n# A tibble: 14,487 × 5\n   DbaseID ScientificName                    `DBH (cm)` `TreeHt (m)` `Leaf (m2)`\n     &lt;dbl&gt; &lt;chr&gt;                                  &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1       1 Acer saccharinum                         2.5          2           2.5\n 2       2 Betula pendula                           2.5          1.5         1.9\n 3       3 Celtis sinensis                          2.5          1.8         2.2\n 4       4 Cinnamomum camphora                      2.5          2           2  \n 5       5 Fraxinus angustifolia 'Raywood'          2.5          2           2.2\n 6       6 Fraxinus excelsior 'Hessei'              2.5          2           2.2\n 7       7 Fraxinus holotricha                      2.5          2           2.2\n 8       8 Fraxinus pennsylvanica 'Marshall'        2.5          2           2.2\n 9       9 Fraxinus velutina 'Modesto'              2.5          2           2.1\n10      10 Ginkgo biloba                            2.5          1.6         1.3\n# ℹ 14,477 more rows\n\n\nSince this kind of subsetting requires us to give column names as character values, we don’t need the backticks. But here our argument is a vector of column names inside of square brackets.\nThe power of select lies in its ability to take additional arguments and interface with helper functions. For example, we can use the starts_with function to request only the columns containing DBH values:\n\nallDBH&lt;-select(treeData,DbaseID,starts_with(\"dbh\"))\nallDBH\n\n# A tibble: 14,487 × 10\n   DbaseID `DBH (cm)`  dbh1  dbh2  dbh3  dbh4  dbh5  dbh6  dbh7  dbh8\n     &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1       1        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 2       2        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 3       3        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 4       4        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 5       5        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 6       6        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 7       7        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 8       8        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n 9       9        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n10      10        2.5   2.5    -1    -1    -1    -1    -1    -1    -1\n# ℹ 14,477 more rows\n\n\nThe starts_with function actually comes from the tidyselect package, which is also loaded as part of tidyverse. We can also add additional arguments to this call to refine it. For example, we can use ignore.case to not include the first column with DBH (the overall DBH measurement) where it is in all capitals and only keep the individual stem measurements that use lower case:\n\nallDBH&lt;-select(treeData,DbaseID,starts_with(\"dbh\",ignore.case = FALSE))\nallDBH\n\n# A tibble: 14,487 × 9\n   DbaseID  dbh1  dbh2  dbh3  dbh4  dbh5  dbh6  dbh7  dbh8\n     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1       1   2.5    -1    -1    -1    -1    -1    -1    -1\n 2       2   2.5    -1    -1    -1    -1    -1    -1    -1\n 3       3   2.5    -1    -1    -1    -1    -1    -1    -1\n 4       4   2.5    -1    -1    -1    -1    -1    -1    -1\n 5       5   2.5    -1    -1    -1    -1    -1    -1    -1\n 6       6   2.5    -1    -1    -1    -1    -1    -1    -1\n 7       7   2.5    -1    -1    -1    -1    -1    -1    -1\n 8       8   2.5    -1    -1    -1    -1    -1    -1    -1\n 9       9   2.5    -1    -1    -1    -1    -1    -1    -1\n10      10   2.5    -1    -1    -1    -1    -1    -1    -1\n# ℹ 14,477 more rows\n\n\nThere are several of these helper functions that work in this case:\n\n#columns ending with the word \"Name\"\nallNames&lt;-select(treeData,ends_with(\"Name\",ignore.case = TRUE))\nallNames\n\n# A tibble: 14,487 × 2\n   ScientificName                    CommonName          \n   &lt;chr&gt;                             &lt;chr&gt;               \n 1 Acer saccharinum                  Silver maple        \n 2 Betula pendula                    European white birch\n 3 Celtis sinensis                   Chinese hackberry   \n 4 Cinnamomum camphora               Camphor tree        \n 5 Fraxinus angustifolia 'Raywood'   Raywood ash         \n 6 Fraxinus excelsior 'Hessei'       Hesse ash           \n 7 Fraxinus holotricha               Moraine ash         \n 8 Fraxinus pennsylvanica 'Marshall' Marshall ash        \n 9 Fraxinus velutina 'Modesto'       Modesto ash         \n10 Ginkgo biloba                     Ginkgo              \n# ℹ 14,477 more rows\n\n#columns containing the word \"Street\"\nallStreet&lt;-select(treeData,DbaseID,contains(\"Street\",ignore.case = FALSE))\nallStreet\n\n# A tibble: 14,487 × 5\n   DbaseID `Park/Street` OnStreet FromStreet ToStreet\n     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;   \n 1       1 Nursery       -1       -1         -1      \n 2       2 Nursery       -1       -1         -1      \n 3       3 Nursery       -1       -1         -1      \n 4       4 Nursery       -1       -1         -1      \n 5       5 Nursery       -1       -1         -1      \n 6       6 Nursery       -1       -1         -1      \n 7       7 Nursery       -1       -1         -1      \n 8       8 Nursery       -1       -1         -1      \n 9       9 Nursery       -1       -1         -1      \n10      10 Nursery       -1       -1         -1      \n# ℹ 14,477 more rows\n\n\nFinally, when selecting columns, you also have an opportunity to rename them as you’d prefer, assigning them by entering the new name in quotes (e.g., “LeafArea” and the :\n\ntreeMetrics&lt;-select(treeData,\"ID\"=DbaseID,\"Name\"=ScientificName,\"DBH\"=`DBH (cm)`,\"Height\"=`TreeHt (m)`,\"LeafArea\"=`Leaf (m2)`)\ntreeMetrics\n\n# A tibble: 14,487 × 5\n      ID Name                                DBH Height LeafArea\n   &lt;dbl&gt; &lt;chr&gt;                             &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n 1     1 Acer saccharinum                    2.5    2        2.5\n 2     2 Betula pendula                      2.5    1.5      1.9\n 3     3 Celtis sinensis                     2.5    1.8      2.2\n 4     4 Cinnamomum camphora                 2.5    2        2  \n 5     5 Fraxinus angustifolia 'Raywood'     2.5    2        2.2\n 6     6 Fraxinus excelsior 'Hessei'         2.5    2        2.2\n 7     7 Fraxinus holotricha                 2.5    2        2.2\n 8     8 Fraxinus pennsylvanica 'Marshall'   2.5    2        2.2\n 9     9 Fraxinus velutina 'Modesto'         2.5    2        2.1\n10    10 Ginkgo biloba                       2.5    1.6      1.3\n# ℹ 14,477 more rows\n\n\nIf you only want to rename some columns without selecting a subset of them, you can use the rename function:\n\ntreeMetrics&lt;-rename(treeMetrics,\"DBH_cm\"=DBH,\"Height_m\"=Height,\"LeafArea_m2\"=LeafArea)\ntreeMetrics\n\n# A tibble: 14,487 × 5\n      ID Name                              DBH_cm Height_m LeafArea_m2\n   &lt;dbl&gt; &lt;chr&gt;                              &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;\n 1     1 Acer saccharinum                     2.5      2           2.5\n 2     2 Betula pendula                       2.5      1.5         1.9\n 3     3 Celtis sinensis                      2.5      1.8         2.2\n 4     4 Cinnamomum camphora                  2.5      2           2  \n 5     5 Fraxinus angustifolia 'Raywood'      2.5      2           2.2\n 6     6 Fraxinus excelsior 'Hessei'          2.5      2           2.2\n 7     7 Fraxinus holotricha                  2.5      2           2.2\n 8     8 Fraxinus pennsylvanica 'Marshall'    2.5      2           2.2\n 9     9 Fraxinus velutina 'Modesto'          2.5      2           2.1\n10    10 Ginkgo biloba                        2.5      1.6         1.3\n# ℹ 14,477 more rows\n\n\n\n\nSlice\nThe slice function is used to select a subset of rows using their indices (i.e., row numbers). For example, to get the first 100 rows, you could use:\n\nslice(treeData,1:100)\n\n# A tibble: 100 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 90 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nThe slice function is actually one of a few different slice-based functions that serve different purposes. For example, the slice_sample allows us to take a random subset of rows from our data:\n\nslice_sample(treeData,n=100)\n\n# A tibble: 100 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1    7493 NoEast Queen… JFKMa… 318442 411   Street        PLAC   Platanus x ac…\n 2    9368 InterW Albuq… ABQMa…  13784 Grav… Park          GLTR   Gleditsia tri…\n 3   13671 PacfNW Longv… Longv…   9295 -1    Park          FRLA   Fraxinus lati…\n 4    1687 InlEmp Clare… CLMma…  18917 5     -1            SCMO   Schinus molle \n 5     996 SoCalC Santa… SMAMa… 100285 -1    -1            MEEX   Metrosideros …\n 6   17691 SacVal Sacra… SMFMa…  44247 Sout… Street        QUAG1  Quercus agrif…\n 7    8533 TpIntW Boise… BOIMa…  30983 7A    Street        FRAM   Fraxinus amer…\n 8     594 InlVal Modes… Motow…  78936 -1    -1            FRPE_M Fraxinus penn…\n 9    4359 NMtnPr Fort … FNLMa…    642 -1    Street        ULPU   Ulmus pumila  \n10    5794 LoMidW India… INDMa…    325 E06   -1            FRAM   Fraxinus amer…\n# ℹ 90 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nOr we can get the top fifty trees by height using slice_max:\n\nslice_max(treeData,`TreeHt (m)`,n=50)\n\n# A tibble: 55 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1    2665 NoCalC Berke… JBKMa…  29784 1     Park          SESE   Sequoia sempe…\n 2   13635 PacfNW Longv… Longv…   8919 -1    Park          POTR2  Populus balsa…\n 3    2617 NoCalC Berke… JBKMa…  28535 2     Park          EUGL   Eucalyptus gl…\n 4    2636 NoCalC Berke… JBKMa…  28918 2     Park          EUGL   Eucalyptus gl…\n 5   11741 Piedmt Charl… CLTMa…  43077 G6    Street        QURU   Quercus rubra \n 6    2614 NoCalC Berke… JBKMa…  28524 2     Park          EUGL   Eucalyptus gl…\n 7    2649 NoCalC Berke… JBKMa…  29288 2     Park          SESE   Sequoia sempe…\n 8    2840 NoCalC Berke… JBKMa…  70598 1     Park          EUGL   Eucalyptus gl…\n 9   12252 Piedmt Charl… CLTMa… 125399 F6    Street        QUAL   Quercus alba  \n10   13658 PacfNW Longv… Longv…   9192 -1    Park          POTR2  Populus balsa…\n# ℹ 45 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\n\n\nDistinct\nA last function worth mentioning for subsetting is the distinct function. As you might imagine, this pulls all unique values from a given column in a dataset.\n\ndistinct(treeData,City)\n\n# A tibble: 17 × 1\n   City            \n   &lt;chr&gt;           \n 1 Modesto, CA     \n 2 Santa Monica, CA\n 3 Claremont, CA   \n 4 Berkeley, CA    \n 5 Glendale, AZ    \n 6 Fort Collins, CO\n 7 Minneapolis, MN \n 8 Indianapolis, IN\n 9 Queens, NY      \n10 Boise, ID       \n11 Albuquerque, NM \n12 Honolulu, HI    \n13 Charleston, SC  \n14 Charlotte, NC   \n15 Orlando, FL     \n16 Longview, WA    \n17 Sacramento, CA  \n\n\nThis can be used with multiple columns to get the unique combinations of variables present in the data:\n\ndistinct(treeData,City,CommonName)\n\n# A tibble: 357 × 2\n   City        CommonName          \n   &lt;chr&gt;       &lt;chr&gt;               \n 1 Modesto, CA Silver maple        \n 2 Modesto, CA European white birch\n 3 Modesto, CA Chinese hackberry   \n 4 Modesto, CA Camphor tree        \n 5 Modesto, CA Raywood ash         \n 6 Modesto, CA Hesse ash           \n 7 Modesto, CA Moraine ash         \n 8 Modesto, CA Marshall ash        \n 9 Modesto, CA Modesto ash         \n10 Modesto, CA Ginkgo              \n# ℹ 347 more rows\n\n\n\n\n\n\n\n\nTry it yourself!\n\n\n\nYou can quickly get a complex subset by combining some of these functions. Using the tree data and the functions above, create the following datasets:\n\nThe database ID and all columns measured in meters for all trees in the Quercus genus\nThe database ID, Common Name, and DBH of the top 200 trees by leaf area in California\nThe database ID, scientific name, street name, and crown height for trees on located on an “Elm Street”\n\n\n\n\n\n\n\n\n\nStretch activity\n\n\n\nHow might you visualize some the datasets you just created? Add some visualizations of these datasets to your Quarto document.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with wrangling</span>"
    ]
  },
  {
    "objectID": "02_reordering.html",
    "href": "02_reordering.html",
    "title": "2  Transforming data",
    "section": "",
    "text": "Beyond subsetting, other functions from dplyr work to restructure the data by changing the arrangement of rows and columns, or by modifying their contents.\n\nMutate\nMutate is a useful function that creates new columns by calculating values from existing columns. For example, we can add a column of DBH values in inches this way:\n\ntreeData2&lt;-mutate(treeData,DBHin=`DBH (cm)` / 2.54)\ntreeData2\n\n# A tibble: 14,487 × 42\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 14,477 more rows\n# ℹ 33 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nHere we’ve created a new variable called DBHin by multiplying all the values in DBH (cm) by 2.54. We can also create new values by combining values across multiple columns. For example, if we wanted to get crown depth, which is the difference between the total tree height and the crown height, we can subtract these using a mutate function:\n\ntreeData3&lt;-mutate(treeData2,crownDepth_m=`TreeHt (m)`-`CrnHt (m)`)\nggplot(treeData3,aes(x=crownDepth_m)) + geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThe important thing to remember about these kinds of operations is that they are happening row-wise, so the values in the new column will correspond to the position of values in the columns used. For example, the first tree height value is 2 meters, while the first crown height value is 0.5. When the latter is subtracted from the former, we get a value of 1.5, and this becomes the first value in our new column.\n\n\nBind\nSometimes you may want to combine two datasets into a single table. Let’s say we had two tables of different maple trees:\n\nsugarMaples&lt;-filter(treeData,CommonName==\"Sugar maple\")\nredMaples&lt;-filter(treeData,CommonName==\"Red Maple\")\n\nWe can put these two together using the bind_rows function:\n\nmapleTrees&lt;-bind_rows(sugarMaples,redMaples)\n\nThe bind_cols function works similarly, but instead binds new columns to an existing table. For example, let’s say we had our maple tree data in two pieces; information about streets and information species names:\n\nmapleNames&lt;-select(mapleTrees,ends_with(\"Name\",ignore.case = TRUE))\nmapleStreets&lt;-select(mapleTrees,DbaseID,contains(\"Street\",ignore.case = FALSE))\n\nWe can recombine these using the bind_cols function this way:\n\nmapleData&lt;-bind_cols(mapleStreets,mapleNames)\nmapleData\n\n# A tibble: 246 × 7\n   DbaseID `Park/Street` OnStreet FromStreet ToStreet ScientificName CommonName \n     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;      \n 1    3936 Street        -1       -1         -1       Acer saccharum Sugar maple\n 2    4014 Street        -1       -1         -1       Acer saccharum Sugar maple\n 3    4101 Street        -1       -1         -1       Acer saccharum Sugar maple\n 4    4150 Street        -1       -1         -1       Acer saccharum Sugar maple\n 5    4206 Street        -1       -1         -1       Acer saccharum Sugar maple\n 6    4268 Street        -1       -1         -1       Acer saccharum Sugar maple\n 7    4295 Street        -1       -1         -1       Acer saccharum Sugar maple\n 8    4348 Street        -1       -1         -1       Acer saccharum Sugar maple\n 9    4353 Street        -1       -1         -1       Acer saccharum Sugar maple\n10    4371 Street        -1       -1         -1       Acer saccharum Sugar maple\n# ℹ 236 more rows\n\n\n\n\n\n\n\n\nTry it yourself!\n\n\n\nA distinguishing factor between the tidyverse bind_rows and its Base R equivalent (rbind) is that the Base R commands will only work with tables that have the same opposing dimension (same number of columns). The tidyverse versions will simply fill any unmatched columns or rows with NA values. Try it by combining the tree dataset with these datasets from the modeldata package\n\ncrickets\npenguins\nSacramento",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Transforming data</span>"
    ]
  },
  {
    "objectID": "03_tidying.html",
    "href": "03_tidying.html",
    "title": "3  Tidying data",
    "section": "",
    "text": "In class, we will be discussing the principles of tidy data. These are:\n\neach variable is stored in its own column\neach observation is stored in its own row\neach cell contains a unique value\n\nThese seem pretty straightforward, but in fact these simple rules are broken quite regularly, with data stored in column names, or multiple data types stored in a single column, or variables stored in both rows and columns. The tidyr package provides some key functions for dealing with these kinds of issues.\n\ntreeData\n\n# A tibble: 14,487 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 14,477 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\n\n3.0.1 Pivot_longer\nOftentimes, categorical information you want to use is actually stored in the names of columns. To deal with this, we can gather the data in these columns into two columns: one with the column names, and another with their associated values.\n\n\n\n\n\nIn the tree dataset, for example, the last 8 columns are values for DBH recorded across multiple stems (up to 8). Not every tree will have these, so the table uses -1 to indicate an absence of stems. We can use pivot_longer to turn each of these columns into a value in a single column:\n\nstemData&lt;-pivot_longer(\n  data=treeData,\n  cols=dbh1:dbh8,\n  names_to=\"stemNum\",\n  values_to=\"dbhMeasure\"\n)\n\nHere’s a breakdown of the arguments being used here:\n\ndata is the table being pivoted (in this case, treeData)\ncols is the columns where the names are going to be converted to data (in this case, columns dbh1 to dbh8 (you could substitute a vector of columns names if they aren’t in sequential order)\nnames_to provides a name for a new column where the names are going to be stored as a data\nvalues_to provides a name for a new column where the values from the columns we are converting will go.\n\nRunning this code, you can see the effect. While we’re at it, we might want to eliminate the letters “dbh” from the stem number values. We can do this by adding an additional argument: names_prefix.\n\nstemData&lt;-pivot_longer(\n  data=treeData,\n  cols=dbh1:dbh8,\n  names_to=\"stemNum\",\n  values_to=\"dbhMeasure\",\n  names_prefix = \"dbh\"\n)\n\nNow when we look at our data, we have a few less variables to deal with but a considerably larger number of observations:\n\nstemData\n\n# A tibble: 115,896 × 35\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 3       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 4       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 5       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 6       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 7       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 8       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 9       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n10       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n# ℹ 115,886 more rows\n# ℹ 26 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nWhat this data allows us to do more easily is use stem number itself as a variable. For example, we can now plot a boxplot to show how these vary in terms of DBH measurements:\n\nstemData2&lt;-filter(stemData,dbhMeasure&gt;-1)\nggplot(stemData2,aes(x=stemNum,y=dbhMeasure)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n3.0.2 Pivot_wider\nPivoting wider involves taking data that is stored in a single column and spreading it across multiple columns.\n\n\n\n\n\nHere, we’ll use it to convert out tree data back into the format we’re used to:\n\ntreeWide&lt;-pivot_wider(\n  data=stemData,\n  names_from=stemNum,\n  values_from=dbhMeasure\n)\ntreeWide\n\n# A tibble: 14,487 × 41\n   DbaseID Region City   Source TreeID Zone  `Park/Street` SpCode ScientificName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;         \n 1       1 InlVal Modes… Motow…      1 Nurs… Nursery       ACSA1  Acer sacchari…\n 2       2 InlVal Modes… Motow…      2 Nurs… Nursery       BEPE   Betula pendula\n 3       3 InlVal Modes… Motow…      3 Nurs… Nursery       CESI4  Celtis sinens…\n 4       4 InlVal Modes… Motow…      4 Nurs… Nursery       CICA   Cinnamomum ca…\n 5       5 InlVal Modes… Motow…      5 Nurs… Nursery       FRAN_R Fraxinus angu…\n 6       6 InlVal Modes… Motow…      6 Nurs… Nursery       FREX_H Fraxinus exce…\n 7       7 InlVal Modes… Motow…      7 Nurs… Nursery       FRHO   Fraxinus holo…\n 8       8 InlVal Modes… Motow…      8 Nurs… Nursery       FRPE_M Fraxinus penn…\n 9       9 InlVal Modes… Motow…      9 Nurs… Nursery       FRVE_G Fraxinus velu…\n10      10 InlVal Modes… Motow…     10 Nurs… Nursery       GIBI   Ginkgo biloba \n# ℹ 14,477 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\n\n\n3.0.3 Separate\nThe seperate function takes columns where there is more than one piece of information and breaks it up into multiple columns. For example, let’s say we wanted separate columns for the genus and species of the trees:\n\ntreeDataSep&lt;-separate(\n  data=treeData,\n  col=ScientificName,\n  into=c(\"Genus\",\"Species\"),\n  sep=\" \",\n  extra=\"drop\")\ntreeDataSep\n\n# A tibble: 14,487 × 42\n   DbaseID Region City    Source TreeID Zone  `Park/Street` SpCode Genus Species\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n 1       1 InlVal Modest… Motow…      1 Nurs… Nursery       ACSA1  Acer  saccha…\n 2       2 InlVal Modest… Motow…      2 Nurs… Nursery       BEPE   Betu… pendula\n 3       3 InlVal Modest… Motow…      3 Nurs… Nursery       CESI4  Celt… sinens…\n 4       4 InlVal Modest… Motow…      4 Nurs… Nursery       CICA   Cinn… campho…\n 5       5 InlVal Modest… Motow…      5 Nurs… Nursery       FRAN_R Frax… angust…\n 6       6 InlVal Modest… Motow…      6 Nurs… Nursery       FREX_H Frax… excels…\n 7       7 InlVal Modest… Motow…      7 Nurs… Nursery       FRHO   Frax… holotr…\n 8       8 InlVal Modest… Motow…      8 Nurs… Nursery       FRPE_M Frax… pennsy…\n 9       9 InlVal Modest… Motow…      9 Nurs… Nursery       FRVE_G Frax… veluti…\n10      10 InlVal Modest… Motow…     10 Nurs… Nursery       GIBI   Gink… biloba \n# ℹ 14,477 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nThe arguments here should look familiar, but a couple may be worth discussing. The sep argument gives the symbol that separates the two sections. Here, the genus and species are separated by a single space, so we include that in quotes. The extra argument gives instructions on what to do with any extra data. If you look at the original tree data, you can see some scientific names have more than two parts. In this case, let’s assume we’re not too fussy about that, so we use the argument “drop” to get rid of it.\n\n\n3.0.4 Unite\nUnite is the opposite of separate. It simply takes two columns and puts them together, like so:\n\ntreeDataUnite&lt;-unite(\n  data=treeDataSep,\n  col=\"SciName\",\n  Genus:Species,\n  sep=\" \",\n  remove=TRUE)\ntreeDataUnite\n\n# A tibble: 14,487 × 41\n   DbaseID Region City        Source   TreeID Zone  `Park/Street` SpCode SciName\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;  \n 1       1 InlVal Modesto, CA Motown2…      1 Nurs… Nursery       ACSA1  Acer s…\n 2       2 InlVal Modesto, CA Motown2…      2 Nurs… Nursery       BEPE   Betula…\n 3       3 InlVal Modesto, CA Motown2…      3 Nurs… Nursery       CESI4  Celtis…\n 4       4 InlVal Modesto, CA Motown2…      4 Nurs… Nursery       CICA   Cinnam…\n 5       5 InlVal Modesto, CA Motown2…      5 Nurs… Nursery       FRAN_R Fraxin…\n 6       6 InlVal Modesto, CA Motown2…      6 Nurs… Nursery       FREX_H Fraxin…\n 7       7 InlVal Modesto, CA Motown2…      7 Nurs… Nursery       FRHO   Fraxin…\n 8       8 InlVal Modesto, CA Motown2…      8 Nurs… Nursery       FRPE_M Fraxin…\n 9       9 InlVal Modesto, CA Motown2…      9 Nurs… Nursery       FRVE_G Fraxin…\n10      10 InlVal Modesto, CA Motown2…     10 Nurs… Nursery       GIBI   Ginkgo…\n# ℹ 14,477 more rows\n# ℹ 32 more variables: CommonName &lt;chr&gt;, TreeType &lt;chr&gt;, address &lt;chr&gt;,\n#   street &lt;chr&gt;, side &lt;chr&gt;, cell &lt;dbl&gt;, OnStreet &lt;chr&gt;, FromStreet &lt;chr&gt;,\n#   ToStreet &lt;chr&gt;, Age &lt;dbl&gt;, `DBH (cm)` &lt;dbl&gt;, `TreeHt (m)` &lt;dbl&gt;,\n#   CrnBase &lt;dbl&gt;, `CrnHt (m)` &lt;dbl&gt;, `CdiaPar (m)` &lt;dbl&gt;,\n#   `CDiaPerp (m)` &lt;dbl&gt;, `AvgCdia (m)` &lt;dbl&gt;, `Leaf (m2)` &lt;dbl&gt;,\n#   Setback &lt;dbl&gt;, TreeOr &lt;dbl&gt;, CarShade &lt;dbl&gt;, LandUse &lt;dbl&gt;, Shape &lt;dbl&gt;, …\n\n\nThe last argument in this case, remove, takes away the now redundant columns of Genus and Species.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nUse the separate and unite functions to do the following:\n\nIn the tree dataset, create separate columns for city and state\nIn the Sacramento dataset, combine the latitude and longitude columns",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tidying data</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 8 Lab: Cleaning, Tidying, and Wrangling Data",
    "section": "",
    "text": "Introduction\nDatasets are often assembled in ways that facilitate data collection, but often with limited consideration to how they are analyzed. This is especially true when data is being re-used from published sources and the new use is outside of the scope of what the data authors intended. There is a saying, largely anecdotal but probably accurate, that data scientists spend 80% of their time cleaning and organizing data.\nThe combined processes of data cleaning, organizing, and transforming are often subsumed under the term data wrangling. The definitions of the term “wrangle” are:\n\nhave a long and complicated dispute\nround up, herd, or take charge of (livestock)\n\nBoth of these definitions are strangely appropriate. Working with data can often feel like a discussion, sometimes a heated one, in which you are trying to convince the data to yield to a particular form that allows easier integration into a data workflow. It can also sometimes feel as though you are tending to a herd of animals (cats come to mind), trying to create order from chaos.\nWe have already done some of this in previous lectures. For example, we have seen how we can add transformed columns to a table using the $ and &lt;- operators; we have seen how we can subset cases using square brackets [] and the subset function, and we have used exploratory data analysis to identify suspect and outlier values. However, because wrangling makes up so much of what we do as data scientists, specialized tools have been developed to deal with them, and these available to us through the tidyverse family of packages. In this lab, you will learn to:\n\nsubset, reorder, and transform data using tools from the dplyr package\ncreate tidy datasets using the pivot functions from the tidyr package\nuse helper functions from packages like tidyselect and stringr\n\nTo begin, I recommend creating a file system, opening a new Quarto document, and giving each of the pages in this lab its own heading (see the table of contents). And don’t forget to load the tidyverse package!\n\nlibrary(tidyverse)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "LabExercise8.html",
    "href": "LabExercise8.html",
    "title": "Week 8 Lab Exercise",
    "section": "",
    "text": "In this exercise, you’re going to work on your skills in data wrangling by modifying tables.\nCreate a file system and add a Quarto document. Use headings to structure the workflow of this lab.\nDownload the greenTransitSurvey.csv dataset, which is a fictional survey of students from three Boston area universities on the number of days they used different low-emissions transport options during the fall and spring semester. Using this dataset, and the functions discussed in this lab, complete the following tasks:\n\nCombine student names to a single column with last name first, first name last\nCreate columns for semester and method of transport\nCreate separate tibbles for each institution\nCreate boxplots for each institution showing how use of different transport methods varied between semesters\n\nSubmit your work as a Quarto document to Canvas. Detailed grading criteria can be found there.",
    "crumbs": [
      "Week 8 Lab Exercise"
    ]
  }
]